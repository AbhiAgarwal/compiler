/* Pr3BaseHxTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. Pr3BaseHxTokenManager.java */
package edu.nyu.csci.cc.fall14;

/** Token Manager. */
@SuppressWarnings("unused")public class Pr3BaseHxTokenManager implements Pr3BaseHxConstants {
                    int nesting ; int nestedState;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_5(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0){
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 51);
      default :
         return jjMoveNfa_5(2, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x40000000000000L, 0x0L
};
static final long[] jjbitVec1 = {
   0xffffff7ffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0xffbfffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffc3fffffffffL
};
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xfffffffeffffd9ffL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     { jjCheckNAdd(1); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     { jjCheckNAdd(0); }
                  }
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 121;
                  { jjCheckNAdd(0); }
                  break;
               case 1:
                  if ((0xfffffffeffffd9ffL & l) == 0L)
                     break;
                  kind = 122;
                  { jjCheckNAdd(1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 1:
                  kind = 122;
                  { jjCheckNAdd(1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 121)
                        kind = 121;
                     { jjCheckNAdd(0); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 122)
                        kind = 122;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 121)
                     kind = 121;
                  { jjCheckNAdd(0); }
                  break;
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 122)
                     kind = 122;
                  { jjCheckNAdd(1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_7(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 53);
      case 10217:
         return jjStopAtPos(0, 54);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1){
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_8(){
   switch(curChar)
   {
      case 1:
         return jjStopAtPos(0, 120);
      case 45:
         return jjStopAtPos(0, 118);
      case 93:
         return jjStopAtPos(0, 117);
      case 94:
         return jjStopAtPos(0, 116);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
static final long[] jjbitVec5 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffdffffffffbfdL & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(0, 1); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(4); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(4, 10); }
                  break;
               case 12:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 15:
                  if ((0xfc00ffffffffffffL & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff8fffffffL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                  }
                  else if (curChar == 92)
                     { jjAddStates(5, 9); }
                  break;
               case 1:
                  if (curChar == 92)
                     { jjAddStates(5, 9); }
                  break;
               case 2:
                  if (curChar == 120)
                     { jjAddStates(10, 11); }
                  break;
               case 3:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x7e0000007eL & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 5:
                  if (curChar == 123)
                     { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 7:
                  if (curChar == 125 && kind > 119)
                     kind = 119;
                  break;
               case 8:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(4); }
                  break;
               case 11:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(4, 10); }
                  break;
               case 15:
                  if ((0xfedfffffffffffffL & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 15:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 119)
                     kind = 119;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 10214:
         return jjStopAtPos(0, 42);
      case 10215:
         return jjStopAtPos(0, 45);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1fffff0000L) != 0L)
         {
            jjmatchedKind = 106;
            return 79;
         }
         if ((active0 & 0x800000000000L) != 0L)
            return 1;
         if ((active1 & 0x4L) != 0L)
            return 7;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 80;
         return -1;
      case 1:
         if ((active1 & 0x1dffff0000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 1;
            return 79;
         }
         if ((active1 & 0x200000000L) != 0L)
            return 79;
         return -1;
      case 2:
         if ((active1 & 0x80000000L) != 0L)
            return 79;
         if ((active1 & 0x1d7fff0000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 2;
            }
            return 79;
         }
         return -1;
      case 3:
         if ((active1 & 0x1d77f10000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 3;
            }
            return 79;
         }
         if ((active1 & 0x80e0000L) != 0L)
            return 79;
         return -1;
      case 4:
         if ((active1 & 0xd04000000L) != 0L)
            return 79;
         if ((active1 & 0x1073f10000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 4;
            return 79;
         }
         return -1;
      case 5:
         if ((active1 & 0x40d10000L) != 0L)
            return 79;
         if ((active1 & 0x1033200000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
            return 79;
         }
         return -1;
      case 6:
         if ((active1 & 0x22000000L) != 0L)
            return 79;
         if ((active1 & 0x1011200000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 6;
            }
            return 79;
         }
         return -1;
      case 7:
         if ((active1 & 0x1010000000L) != 0L)
            return 79;
         if ((active1 & 0x1200000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 7;
            }
            return 79;
         }
         return -1;
      case 8:
         if ((active1 & 0x1200000L) != 0L)
            return 79;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 60);
      case 41:
         return jjStopAtPos(0, 61);
      case 42:
         return jjStopAtPos(0, 62);
      case 43:
         return jjStartNfaWithStates_0(0, 63, 80);
      case 44:
         return jjStopAtPos(0, 72);
      case 46:
         return jjStartNfaWithStates_0(0, 66, 7);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 67);
      case 59:
         return jjStopAtPos(0, 58);
      case 63:
         return jjStopAtPos(0, 64);
      case 64:
         return jjStopAtPos(0, 78);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x6200000a10L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1c0000100L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x60000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x110e0ccL, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x30000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0xc04c80002L, 0x0L);
      case 84:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x2001000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 70);
      case 93:
         return jjStopAtPos(0, 71);
      case 95:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x201200000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20080000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x50000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x404d20000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x880000000L);
      case 123:
         return jjStopAtPos(0, 68);
      case 124:
         return jjStopAtPos(0, 59);
      case 125:
         return jjStopAtPos(0, 69);
      case 172:
         return jjStopAtPos(0, 77);
      case 8593:
         return jjStopAtPos(0, 75);
      case 8594:
         return jjStopAtPos(0, 74);
      case 8595:
         return jjStopAtPos(0, 76);
      case 8704:
         return jjStopAtPos(0, 73);
      case 10214:
         return jjStopAtPos(0, 41);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800c0000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1008000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8038060000L, active1, 0x20000000L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc04000000L, active1, 0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x60c0L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c0000500L, active1, 0x802030000L);
      case 112:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x6200000a30L, active1, 0x1010000000L);
      case 115:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 97, 79);
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000L, active1, 0x1800000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc200000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2081000L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x100008L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000L, active1, 0x1400800000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1008000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000L);
      case 103:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 95, 79);
         return jjMoveStringLiteralDfa3_0(active0, 0x6214000a00L, active1, 0x4000000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10040000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L);
      case 109:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x1c0080000L, active1, 0x2400000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000100L, active1, 0x100000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x420L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2201000L, active1, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0L, active1, 0x1280000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0L);
      case 97:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 79);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0x24000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 79);
         return jjMoveStringLiteralDfa4_0(active0, 0x10c0L, active1, 0x800100000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000020L, active1, 0x1000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x60400L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 26);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 79);
         return jjMoveStringLiteralDfa4_0(active0, 0x1008000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x50200000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c0000000L, active1, 0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x1000000L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 79);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000c06000L, active1, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x6200000800L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x60000L, active1, 0L);
      case 101:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 79);
         return jjMoveStringLiteralDfa5_0(active0, 0xe00400L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1c0100000L, active1, 0x1800000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000000L, active1, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x6200000800L, active1, 0x1000300000L);
      case 110:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 79);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0x2400000L);
      case 114:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 79);
         return jjMoveStringLiteralDfa5_0(active0, 0x6020L, active1, 0x50000000L);
      case 115:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 79);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x1008300L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x8L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x4L, active1, 0L);
      case 76:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(5, 1);
         break;
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x720L, active1, 0x200000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L);
      case 99:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 79);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      case 101:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 79);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 79);
         return jjMoveStringLiteralDfa6_0(active0, 0xee000008c0L, active1, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1008000L, active1, 0x10000000L);
      case 108:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(5, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(5, 20);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 79);
         return jjMoveStringLiteralDfa6_0(active0, 0x1c0000000L, active1, 0x20000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0x2000000L);
      case 116:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 79);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x4L, active1, 0L);
      case 82:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(6, 3);
         break;
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 79);
         return jjMoveStringLiteralDfa7_0(active0, 0x180c01000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x1008000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(6, 5);
         break;
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(6, 10);
         return jjMoveStringLiteralDfa7_0(active0, 0x6200000900L, active1, 0x1000000000L);
      case 114:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x40L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0L);
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 79);
         return jjMoveStringLiteralDfa7_0(active0, 0x200L, active1, 0x10200000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x4L, active1, 0L);
      case 95:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(7, 40);
         break;
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(7, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x8001208000L, active1, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0xc01000L, active1, 0L);
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(7, 6);
         break;
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(7, 8);
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 100, 79);
         return jjMoveStringLiteralDfa8_0(active0, 0x6400066800L, active1, 0x1000000L);
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L);
      case 121:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x4L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x6000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L);
      case 99:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 85, 79);
         break;
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 88, 79);
         return jjMoveStringLiteralDfa9_0(active0, 0x181008000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x66000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x401000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L);
      case 82:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(9, 2);
         break;
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x180000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x1800L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(9, 21);
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x66000L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x800008000L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(9, 22);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x8400000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x8c00000000L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x180000000L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x22000L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x180000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x800L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(11, 39);
         break;
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(11, 13);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(11, 17);
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000800L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x4400001000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x180000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x4180000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000001000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000L);
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(14, 34);
         return jjMoveStringLiteralDfa15_0(active0, 0x180000000L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000L);
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000L);
      case 104:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x180000000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(15, 35);
         break;
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(16, 11);
         break;
      case 104:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000001000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x180000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000000L);
      case 108:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(17, 12);
         break;
      case 110:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 17;
         }
         return jjMoveStringLiteralDfa18_0(active0, 0x2080000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(18, 37);
         break;
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000000L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(18, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(19, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 79;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(12, 16); }
                  }
                  else if ((0x100002602L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(17, 20); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(21, 23); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(24, 26); }
                  else if (curChar == 46)
                     { jjCheckNAdd(7); }
                  else if (curChar == 35)
                  {
                     if (kind > 105)
                        kind = 105;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 79:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(76); }
                  }
                  else if (curChar == 46)
                     { jjAddStates(27, 28); }
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(66, 67); }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(64, 6); }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(63, 64); }
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(2); }
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar != 35)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAdd(5); }
                  break;
               case 6:
                  if (curChar == 46)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if (curChar == 39)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 12:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 13:
                  if (curChar == 39 && kind > 110)
                     kind = 110;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(29, 30); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(31, 36); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(37, 40); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(41, 45); }
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(46, 49); }
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 28:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 29:
                  if (curChar == 34)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 30:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 31:
                  if (curChar == 34 && kind > 110)
                     kind = 110;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(35); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(50, 51); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(52, 57); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(58, 61); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(62, 66); }
                  break;
               case 43:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(67, 70); }
                  break;
               case 45:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 46:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 48:
                  if ((0xfc00ffffffffffffL & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 49:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0xff000000000000L & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(71, 73); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAdd(54); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(54); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(74, 75); }
                  break;
               case 62:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(17, 20); }
                  break;
               case 63:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(63, 64); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(64, 6); }
                  break;
               case 65:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 68:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAdd(69); }
                  break;
               case 71:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 72:
                  if (curChar == 46)
                     { jjAddStates(27, 28); }
                  break;
               case 75:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 76:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(76); }
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(12, 16); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(78); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAddStates(76, 78); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(79, 83); }
                  break;
               case 79:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(76); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 2:
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(84, 85); }
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 14:
                  if (curChar == 92)
                     { jjAddStates(86, 90); }
                  break;
               case 15:
                  if (curChar == 120)
                     { jjAddStates(91, 92); }
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 18:
                  if (curChar == 123)
                     { jjCheckNAdd(19); }
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 20:
                  if (curChar == 125)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 21:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(31, 36); }
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(37, 40); }
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(41, 45); }
                  break;
               case 28:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 30:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 32:
                  if (curChar == 92)
                     { jjAddStates(93, 97); }
                  break;
               case 33:
                  if (curChar == 120)
                     { jjAddStates(98, 99); }
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(35); }
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 36:
                  if (curChar == 123)
                     { jjCheckNAdd(37); }
                  break;
               case 37:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(37, 38); }
                  break;
               case 38:
                  if (curChar == 125)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 39:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(52, 57); }
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(58, 61); }
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(62, 66); }
                  break;
               case 46:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 47:
                  if (curChar == 92)
                     { jjAddStates(79, 83); }
                  break;
               case 48:
                  if ((0xfedfffffffffffffL & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 52:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(71, 73); }
                  break;
               case 54:
                  if ((0x7e0000007eL & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 55:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAdd(54); }
                  break;
               case 56:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 57:
                  if (curChar == 120)
                     { jjAddStates(100, 101); }
                  break;
               case 58:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(54); }
                  break;
               case 59:
                  if (curChar == 123)
                     { jjCheckNAdd(60); }
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(60, 61); }
                  break;
               case 61:
                  if (curChar == 125 && kind > 113)
                     kind = 113;
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(102, 103); }
                  break;
               case 70:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(76, 78); }
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 73:
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 74:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAdd(75); }
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAdd(75); }
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(76); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 12:
               case 28:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 30:
               case 46:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 48:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 113)
                     kind = 113;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 79 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x2000000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_4(0x1000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 47:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 10214:
         return jjStopAtPos(0, 43);
      case 10215:
         return jjStopAtPos(0, 44);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 52);
      case 10217:
         return jjStopAtPos(0, 55);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 10;
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 104;
            return 1;
         }
         if ((active1 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 104;
            return 10;
         }
         return -1;
      case 1:
         if ((active1 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 1;
            return 10;
         }
         return -1;
      case 2:
         if ((active1 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 2;
            return 10;
         }
         return -1;
      case 3:
         if ((active1 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 3;
            return 10;
         }
         return -1;
      case 4:
         if ((active1 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 4;
            return 10;
         }
         return -1;
      case 5:
         if ((active1 & 0x2000000000L) != 0L)
            return 10;
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 5;
            return 10;
         }
         return -1;
      case 6:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 6;
            return 10;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 60);
      case 41:
         return jjStopAtPos(0, 61);
      case 42:
         return jjStopAtPos(0, 62);
      case 43:
         return jjStopAtPos(0, 63);
      case 46:
         return jjStopAtPos(0, 66);
      case 47:
         return jjMoveStringLiteralDfa1_1(0x800000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 67);
      case 59:
         return jjStopAtPos(0, 58);
      case 63:
         return jjStopAtPos(0, 64);
      case 95:
         return jjStartNfaWithStates_1(0, 65, 10);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2000000000L);
      case 124:
         return jjStartNfaWithStates_1(0, 59, 10);
      case 10214:
         return jjStopAtPos(0, 41);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_1(active1, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active1, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa4_1(active1, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active1, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_1(active1, 0x2000000000L);
      case 109:
         return jjMoveStringLiteralDfa5_1(active1, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 101, 10);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_1(active1, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa7_1(active1, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_1(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 100, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, 0L, active1);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0x0L, 0x10000000000L
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0x0L, 0x20000000000L
};
static final long[] jjbitVec9 = {
   0x0L, 0x0L, 0xf7fff7ffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 82;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x73ffa07afffff9ffL & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                     { jjCheckNAdd(10); }
                  }
                  if (curChar == 47)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAdd(2); }
                  }
                  break;
               case 0:
                  if ((0x73ffa07afffff9ffL & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(21, 23); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(24, 26); }
                  if ((0x100002602L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 6:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjAddStates(0, 1); }
                  break;
               case 9:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x73ffa07afffff9ffL & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if (curChar == 39)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 12:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 13:
                  if (curChar == 39 && kind > 110)
                     kind = 110;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(29, 30); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(31, 36); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(37, 40); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(41, 45); }
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(46, 49); }
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 28:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 29:
                  if (curChar == 34)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 30:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 31:
                  if (curChar == 34 && kind > 110)
                     kind = 110;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(35); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(50, 51); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(52, 57); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(58, 61); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(62, 66); }
                  break;
               case 43:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(67, 70); }
                  break;
               case 45:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 46:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 49:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddStates(104, 106); }
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(104, 106); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(107, 108); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(109, 114); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(115, 118); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(119, 123); }
                  break;
               case 62:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(124, 127); }
                  break;
               case 64:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(104, 106); }
                  break;
               case 65:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(104, 106); }
                  break;
               case 68:
                  if ((0xfc00ffffffffffffL & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 69:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0xff000000000000L & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(128, 130); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAdd(74); }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(74); }
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(131, 132); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 10:
                  if ((0xffffffffc7ffffffL & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  { jjCheckNAdd(10); }
                  break;
               case 0:
                  if ((0xffffffffc7ffffffL & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(133, 137); }
                  else if (curChar == 91)
                     { jjCheckNAddStates(138, 141); }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(9); }
                  }
                  break;
               case 2:
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0x7fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 8:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(9); }
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 14:
                  if (curChar == 92)
                     { jjAddStates(86, 90); }
                  break;
               case 15:
                  if (curChar == 120)
                     { jjAddStates(91, 92); }
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 18:
                  if (curChar == 123)
                     { jjCheckNAdd(19); }
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 20:
                  if (curChar == 125)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 21:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(31, 36); }
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(37, 40); }
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(41, 45); }
                  break;
               case 28:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 30:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 32:
                  if (curChar == 92)
                     { jjAddStates(93, 97); }
                  break;
               case 33:
                  if (curChar == 120)
                     { jjAddStates(98, 99); }
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(35); }
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 36:
                  if (curChar == 123)
                     { jjCheckNAdd(37); }
                  break;
               case 37:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(37, 38); }
                  break;
               case 38:
                  if (curChar == 125)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 39:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(52, 57); }
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(58, 61); }
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(62, 66); }
                  break;
               case 46:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 47:
                  if (curChar == 91)
                     { jjCheckNAddStates(138, 141); }
                  break;
               case 48:
                  if (curChar == 94)
                     { jjCheckNAddStates(142, 144); }
                  break;
               case 49:
                  if ((0xffffffffcfffffffL & l) != 0L)
                     { jjCheckNAddStates(104, 106); }
                  break;
               case 50:
                  if (curChar == 93 && kind > 115)
                     kind = 115;
                  break;
               case 51:
                  if (curChar == 92)
                     { jjAddStates(145, 149); }
                  break;
               case 52:
                  if (curChar == 120)
                     { jjAddStates(150, 151); }
                  break;
               case 53:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(104, 106); }
                  break;
               case 55:
                  if (curChar == 123)
                     { jjCheckNAdd(56); }
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 57:
                  if (curChar == 125)
                     { jjCheckNAddStates(104, 106); }
                  break;
               case 58:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(109, 114); }
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(115, 118); }
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(119, 123); }
                  break;
               case 65:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(104, 106); }
                  break;
               case 66:
                  if (curChar != 93)
                     break;
                  if (kind > 115)
                     kind = 115;
                  { jjCheckNAddStates(104, 106); }
                  break;
               case 67:
                  if (curChar == 92)
                     { jjAddStates(133, 137); }
                  break;
               case 68:
                  if ((0xfedfffffffffffffL & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 72:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(128, 130); }
                  break;
               case 74:
                  if ((0x7e0000007eL & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 75:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAdd(74); }
                  break;
               case 76:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 77:
                  if (curChar == 120)
                     { jjAddStates(152, 153); }
                  break;
               case 78:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(74); }
                  break;
               case 79:
                  if (curChar == 123)
                     { jjCheckNAdd(80); }
                  break;
               case 80:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 81:
                  if (curChar == 125 && kind > 113)
                     kind = 113;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 10:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 104)
                     kind = 104;
                  { jjCheckNAdd(10); }
                  break;
               case 0:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 104)
                        kind = 104;
                     { jjCheckNAdd(10); }
                  }
                  break;
               case 2:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 102)
                     kind = 102;
                  break;
               case 12:
               case 28:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 30:
               case 46:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 49:
               case 65:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(104, 106); }
                  break;
               case 68:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 113)
                     kind = 113;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 82 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   6, 7, 4, 10, 11, 2, 8, 12, 15, 13, 3, 5, 78, 64, 6, 66, 
   67, 63, 64, 65, 66, 30, 31, 32, 12, 13, 14, 73, 74, 19, 20, 12, 
   17, 13, 14, 23, 24, 12, 17, 13, 14, 12, 17, 13, 14, 23, 12, 27, 
   13, 14, 37, 38, 30, 35, 31, 32, 41, 42, 30, 35, 31, 32, 30, 35, 
   31, 32, 41, 30, 45, 31, 32, 54, 55, 56, 60, 61, 71, 72, 76, 48, 
   49, 52, 57, 50, 9, 10, 15, 21, 25, 28, 26, 16, 18, 33, 39, 43, 
   46, 44, 34, 36, 58, 59, 68, 69, 49, 50, 51, 56, 57, 49, 54, 50, 
   51, 60, 61, 49, 54, 50, 51, 49, 54, 50, 51, 60, 49, 64, 50, 51, 
   74, 75, 76, 80, 81, 68, 69, 72, 77, 70, 48, 49, 51, 66, 49, 51, 
   66, 52, 58, 62, 65, 63, 53, 55, 78, 79, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\123\131\115\102\117\114", "\111\104\105\116\124\111\106\111\105\122", 
"\111\116\124\105\107\105\122", "\101\162\147", "\120\162\157\147\162\141\155", 
"\111\156\164\145\147\145\162\163", "\111\156\164\145\147\145\162", "\103\157\156\163\164\141\156\164", 
"\101\162\147\123\164\141\164\145", "\102\157\157\154\145\141\156", 
"\101\162\147\165\155\145\156\164\123\151\147\156\141\164\165\162\145", "\124\171\160\145\111\144\145\156\164\151\146\151\145\162\124\141\151\154", 
"\111\156\163\164\162\165\143\164\151\157\156\163", "\111\156\163\164\162\165\143\164\151\157\156", 
"\111\144\145\156\164\151\146\151\145\162\163", "\117\160", "\104\145\143\154\141\162\141\164\151\157\156\163", 
"\104\145\143\154\141\162\141\164\151\157\156", "\123\171\155\142\157\154", "\111\146\124\141\151\154", 
"\105\170\160\162\145\163\163\151\157\156", "\123\164\141\164\145\155\145\156\164\163", 
"\123\164\141\164\145\155\145\156\164", "\111\144\145\156\164\151\146\151\145\162", "\124\171\160\145", 
"\123\151\147\156", "\115\145\155", "\122\145\147\163", "\122\145\147", 
"\103\157\155\160\151\154\145", 
"\103\157\155\160\151\154\145\104\145\143\154\141\162\141\164\151\157\156\163", "\103\157\155\160\151\154\145\104\145\143\154\141\162\141\164\151\157\156", 
"\101\162\147\165\155\145\156\164", "\123\151\156\147\154\145\123\164\141\164\145\155\145\156\164", 
"\123\151\156\147\154\145\105\170\160\162\145\163\163\151\157\156", "\124", 
"\101\162\147\165\155\145\156\164\111\104\123\145\141\162\143\150\151\156\147", 
"\101\162\147\165\155\145\156\164\111\156\164\123\145\141\162\143\150\151\156\147", "\116\145\170\164\122\145\147\151\163\164\145\162", 
"\137\137\110\101\103\123\137\137", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\73", "\174", "\50", "\51", "\52", "\53", "\77", "\137", 
"\56", "\72", "\173", "\175", "\133", "\135", "\54", "\u2200", "\u2192", "\u2191", 
"\u2193", "\254", "\100", null, "\155\157\144\165\154\145", "\163\157\162\164", 
"\155\141\151\156", "\144\141\164\141", "\163\143\150\145\155\145", 
"\141\165\164\157\155\141\164\151\143", "\163\171\155\142\157\154", "\163\164\141\164\151\143", 
"\141\164\164\162\151\142\165\164\145", "\143\157\155\160\157\163\145", "\163\165\147\141\162", "\162\165\154\145", 
"\160\162\151\157\162\151\164\171", "\144\145\146\141\165\154\164", "\151\155\160\157\162\164", "\164\141\147", 
"\142\151\156\144\163", "\141\163", "\163\160\141\143\145", "\164\157\153\145\156", 
"\146\162\141\147\155\145\156\164", "\156\145\163\164\145\144", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\136", "\135", "\55", null, "\1", null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 46)
         {
            jjmatchedKind = 46;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 46)
         {
            jjmatchedKind = 46;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 50)
         {
            jjmatchedKind = 50;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 56)
         {
            jjmatchedKind = 56;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 56)
         {
            jjmatchedKind = 56;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 47 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                nesting = 1; nestedState = curLexState;
         break;
      case 48 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    nesting += 1;
         break;
      case 49 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    nesting -= 1; if (nesting<=0) SwitchTo(nestedState);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 41 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                    nesting = 0; nestedState = curLexState;
         break;
      case 42 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                     nesting = 1;
         break;
      case 43 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            nesting++;
         break;
      case 44 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            if (--nesting <= 0) SwitchTo(HX_IN_CONCRETE);
         break;
      case 51 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                            nesting = 0; nestedState = curLexState;
         break;
      case 52 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                       nesting = 1;
         break;
      case 53 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                              nesting++;
         break;
      case 54 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                              if (--nesting <= 0) SwitchTo(IN_PP_UNCONCRETE);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 45 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        SwitchTo(nestedState);
         break;
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                               SwitchTo(nestedState);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public Pr3BaseHxTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public Pr3BaseHxTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 82; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 9 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "HX_RE",
   "HX_IN_CONCRETE",
   "HX_IN_NESTED_CONCRETE",
   "HX_NESTED_COMMENT",
   "HX_PP",
   "IN_PP_UNCONCRETE",
   "IN_PP_NESTED_UNCONCRETE",
   "HX_CC",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, 4, -1, -1, 
   -1, 6, 7, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 
   1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfc8021ffffffffffL, 0x7fa6fffffffffffL, 
};
static final long[] jjtoSkip = {
   0x207800000000000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x1785e0000000000L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[82];
    private final int[] jjstateSet = new int[2 * 82];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
