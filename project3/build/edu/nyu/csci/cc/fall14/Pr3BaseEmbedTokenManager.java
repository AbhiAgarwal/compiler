/* Pr3BaseEmbedTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. Pr3BaseEmbedTokenManager.java */
package edu.nyu.csci.cc.fall14;

/** Token Manager. */
@SuppressWarnings("unused")public class Pr3BaseEmbedTokenManager implements Pr3BaseEmbedConstants {
                    int nesting; int nestedState;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_28(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 117);
      case 10217:
         return jjStopAtPos(0, 118);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 17);
      case 10217:
         return jjStopAtPos(0, 20);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_40(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 170);
      case 10217:
         return jjStopAtPos(0, 171);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_11(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 37);
      case 10217:
         return jjStopAtPos(0, 40);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_35(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 152);
      case 10217:
         return jjStopAtPos(0, 155);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 18);
      case 10217:
         return jjStopAtPos(0, 19);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_52(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 226);
      case 10217:
         return jjStopAtPos(0, 227);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_44(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 184);
      case 10217:
         return jjStopAtPos(0, 185);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_39(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 169);
      case 10217:
         return jjStopAtPos(0, 172);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_49(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 203);
      case 10217:
         return jjStopAtPos(0, 206);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_45(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 189);
      case 10217:
         return jjStopAtPos(0, 192);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_42(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 176);
      case 10217:
         return jjStopAtPos(0, 177);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_34(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 147);
      case 10217:
         return jjStopAtPos(0, 148);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_26(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 111);
      case 10217:
         return jjStopAtPos(0, 112);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_17(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 59);
      case 10217:
         return jjStopAtPos(0, 62);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_47(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 197);
      case 10217:
         return jjStopAtPos(0, 200);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 11);
      case 10217:
         return jjStopAtPos(0, 14);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_25(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 110);
      case 10217:
         return jjStopAtPos(0, 113);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_15(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 51);
      case 10217:
         return jjStopAtPos(0, 54);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_7(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 23);
      case 10217:
         return jjStopAtPos(0, 26);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_37(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 163);
      case 10217:
         return jjStopAtPos(0, 166);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_21(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 97);
      case 10217:
         return jjStopAtPos(0, 100);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_33(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 146);
      case 10217:
         return jjStopAtPos(0, 149);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_30(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 123);
      case 10217:
         return jjStopAtPos(0, 124);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_16(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 52);
      case 10217:
         return jjStopAtPos(0, 53);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_50(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 204);
      case 10217:
         return jjStopAtPos(0, 205);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_46(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 190);
      case 10217:
         return jjStopAtPos(0, 191);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_41(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 175);
      case 10217:
         return jjStopAtPos(0, 178);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 5);
      case 10217:
         return jjStopAtPos(0, 8);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_23(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 103);
      case 10217:
         return jjStopAtPos(0, 106);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_22(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 98);
      case 10217:
         return jjStopAtPos(0, 99);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_29(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 122);
      case 10217:
         return jjStopAtPos(0, 125);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_10(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 30);
      case 10217:
         return jjStopAtPos(0, 31);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_48(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 198);
      case 10217:
         return jjStopAtPos(0, 199);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_12(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 38);
      case 10217:
         return jjStopAtPos(0, 39);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_18(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 60);
      case 10217:
         return jjStopAtPos(0, 61);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_51(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 225);
      case 10217:
         return jjStopAtPos(0, 228);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_31(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 129);
      case 10217:
         return jjStopAtPos(0, 132);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_20(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 68);
      case 10217:
         return jjStopAtPos(0, 69);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xcL) != 0L || (active1 & 0xffdc0301L) != 0L || (active3 & 0xffff0000L) != 0L)
         {
            jjmatchedKind = 231;
            return 2;
         }
         if ((active1 & 0x8000100000000000L) != 0L || (active2 & 0x300003c0000000L) != 0L)
         {
            jjmatchedKind = 231;
            return 303;
         }
         if ((active1 & 0x3fc00L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active1 & 0x8000100000000000L) != 0L || (active2 & 0x30000380000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 1;
            }
            return 303;
         }
         if ((active1 & 0x1c000L) != 0L || (active3 & 0xffff0000L) != 0L)
            return 2;
         if ((active0 & 0xcL) != 0L || (active1 & 0xffde3b01L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 1;
            }
            return 2;
         }
         if ((active2 & 0x40000000L) != 0L)
            return 303;
         return -1;
      case 2:
         if ((active1 & 0x10100000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 2;
            }
            return 2;
         }
         if ((active0 & 0xcL) != 0L || (active1 & 0xefcfbb01L) != 0L || (active3 & 0x700000L) != 0L)
            return 2;
         if ((active2 & 0x20000100000000L) != 0L)
            return 303;
         if ((active1 & 0x8000100000000000L) != 0L || (active2 & 0x10000280000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 2;
            }
            return 303;
         }
         return -1;
      case 3:
         if ((active1 & 0x40800000L) != 0L)
            return 2;
         if ((active1 & 0x10100000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 3;
            return 2;
         }
         if ((active1 & 0x8000000000000000L) != 0L)
            return 303;
         if ((active1 & 0x100000000000L) != 0L || (active2 & 0x10000280000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 3;
            return 303;
         }
         return -1;
      case 4:
         if ((active1 & 0x10100000L) != 0L)
            return 2;
         if ((active1 & 0x100000000000L) != 0L || (active2 & 0x10000080000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 4;
            return 303;
         }
         if ((active2 & 0x200000000L) != 0L)
            return 303;
         return -1;
      case 5:
         if ((active1 & 0x100000000000L) != 0L || (active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 5;
            return 303;
         }
         if ((active2 & 0x80000000L) != 0L)
            return 303;
         return -1;
      case 6:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 6;
            return 303;
         }
         if ((active2 & 0x10000000000000L) != 0L)
            return 303;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100L, 0x0L);
      case 35:
         return jjStopAtPos(0, 34);
      case 38:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80L, 0x0L);
      case 40:
         return jjStopAtPos(0, 42);
      case 41:
         return jjStopAtPos(0, 43);
      case 42:
         return jjStopAtPos(0, 144);
      case 43:
         return jjStopAtPos(0, 142);
      case 44:
         return jjStopAtPos(0, 1);
      case 45:
         return jjStopAtPos(0, 143);
      case 59:
         return jjStopAtPos(0, 157);
      case 60:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800L, 0x0L);
      case 61:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200L, 0x0L);
      case 62:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300L, 0x0L, 0x0L);
      case 66:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f800L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0xcL, 0xd00000L, 0x0L, 0x10000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7000000L, 0x0L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7ffc0000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf0000000L, 0x0L, 0x80000000L);
      case 91:
         return jjStopAtPos(0, 194);
      case 93:
         return jjStopAtPos(0, 195);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000040000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 56);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40L, 0x0L);
      case 125:
         return jjStopAtPos(0, 57);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      case 48:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 210, 2);
         break;
      case 49:
         if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x700000L);
      case 50:
         if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 215, 2);
         break;
      case 51:
         if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 216, 2);
         break;
      case 52:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 217, 2);
         break;
      case 53:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 218, 2);
         break;
      case 54:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 219, 2);
         break;
      case 55:
         if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 220, 2);
         break;
      case 56:
         if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 221, 2);
         break;
      case 57:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 222, 2);
         break;
      case 61:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         break;
      case 67:
         if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 209, 2);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xd00100L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000L, active2, 0L, active3, 0L);
      case 76:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x18000L, active2, 0L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20200L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1080000L, active2, 0L, active3, 0L);
      case 80:
         if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 223, 2);
         break;
      case 82:
         if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 208, 2);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0xcL, active1, 0L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x70000000L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x82000000L, active2, 0L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L);
      case 102:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 158, 303);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 124:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 48:
         if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 212, 2);
         break;
      case 49:
         if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 213, 2);
         break;
      case 50:
         if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 214, 2);
         break;
      case 66:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 95, 2);
         break;
      case 68:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 2);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 2);
         break;
      case 69:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 2);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 2);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 2);
         break;
      case 73:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 2);
         break;
      case 76:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 2, 2);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 89, 2);
         break;
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10100000L, active2, 0L, active3, 0L);
      case 78:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 2);
         break;
      case 80:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 82, 2);
         break;
      case 81:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 2);
         break;
      case 82:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 3, 2);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 2);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 2);
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40800000L, active2, 0L, active3, 0L);
      case 84:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 2);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 2);
         break;
      case 86:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L);
      case 114:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 160, 303);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L);
      case 116:
         if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 181, 303);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, active1, active2, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 66:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 2);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 94, 2);
         break;
      case 70:
         return jjMoveStringLiteralDfa4_0(active1, 0x10100000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active1, 0x100000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 127, 303);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x10000200000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, 0L, active1, active2, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 2);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 2);
         break;
      case 101:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 161, 303);
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x10000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active1, 0x100000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, 0L, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1, active2, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x10000000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active1, 0x100000000000L, active2, 0L);
      case 110:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 159, 303);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 180, 303);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0x100000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 108, 303);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0x10000000000L
};
static final long[] jjbitVec4 = {
   0xffffff7ffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffcffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 303;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     { jjCheckNAdd(3); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 230)
                        kind = 230;
                  }
                  else if (curChar == 47)
                     { jjAddStates(0, 1); }
                  else if (curChar == 36)
                  {
                     if (kind > 231)
                        kind = 231;
                     { jjCheckNAdd(2); }
                  }
                  break;
               case 303:
               case 2:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  { jjCheckNAdd(2); }
                  break;
               case 1:
                  if (curChar != 36)
                     break;
                  if (kind > 231)
                     kind = 231;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  { jjCheckNAdd(3); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  { jjAddStates(2, 3); }
                  break;
               case 7:
                  if (curChar == 47)
                     { jjAddStates(0, 1); }
                  break;
               case 8:
                  if (curChar != 47)
                     break;
                  if (kind > 230)
                     kind = 230;
                  { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 230)
                     kind = 230;
                  { jjCheckNAdd(9); }
                  break;
               case 10:
                  if (curChar == 42)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 11:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 12:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 14:
                  if (curChar == 47 && kind > 230)
                     kind = 230;
                  break;
               case 15:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 32)
                     { jjAddStates(7, 8); }
                  break;
               case 19:
                  if (curChar == 32)
                     { jjAddStates(9, 10); }
                  break;
               case 20:
                  if (kind > 4)
                     kind = 4;
                  break;
               case 23:
                  if (curChar == 32)
                     { jjAddStates(11, 12); }
                  break;
               case 25:
                  if (curChar == 32)
                     { jjAddStates(13, 14); }
                  break;
               case 26:
                  if (kind > 10)
                     kind = 10;
                  break;
               case 33:
                  if (curChar == 32)
                     { jjAddStates(15, 16); }
                  break;
               case 35:
                  if (curChar == 32)
                     { jjAddStates(17, 18); }
                  break;
               case 36:
                  if (kind > 16)
                     kind = 16;
                  break;
               case 42:
                  if (curChar == 32)
                     { jjAddStates(19, 20); }
                  break;
               case 44:
                  if (curChar == 32)
                     { jjAddStates(21, 22); }
                  break;
               case 45:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 53:
                  if (curChar == 32)
                     { jjAddStates(23, 24); }
                  break;
               case 55:
                  if (curChar == 32)
                     { jjAddStates(25, 26); }
                  break;
               case 56:
                  if (kind > 28)
                     kind = 28;
                  break;
               case 63:
                  if (curChar == 32)
                     { jjAddStates(27, 28); }
                  break;
               case 65:
                  if (curChar == 32)
                     { jjAddStates(29, 30); }
                  break;
               case 66:
                  if (kind > 36)
                     kind = 36;
                  break;
               case 74:
                  if (curChar == 32)
                     { jjAddStates(31, 32); }
                  break;
               case 76:
                  if (curChar == 32)
                     { jjAddStates(33, 34); }
                  break;
               case 77:
                  if (kind > 44)
                     kind = 44;
                  break;
               case 94:
                  if (curChar == 32)
                     { jjAddStates(35, 36); }
                  break;
               case 96:
                  if (curChar == 32)
                     { jjAddStates(37, 38); }
                  break;
               case 97:
                  if (kind > 50)
                     kind = 50;
                  break;
               case 115:
                  if (curChar == 32)
                     { jjAddStates(39, 40); }
                  break;
               case 117:
                  if (curChar == 32)
                     { jjAddStates(41, 42); }
                  break;
               case 118:
                  if (kind > 58)
                     kind = 58;
                  break;
               case 130:
                  if (curChar == 32)
                     { jjAddStates(43, 44); }
                  break;
               case 132:
                  if (curChar == 32)
                     { jjAddStates(45, 46); }
                  break;
               case 133:
                  if (kind > 66)
                     kind = 66;
                  break;
               case 144:
                  if (curChar == 32)
                     { jjAddStates(47, 48); }
                  break;
               case 146:
                  if (curChar == 32)
                     { jjAddStates(49, 50); }
                  break;
               case 147:
                  if (kind > 96)
                     kind = 96;
                  break;
               case 149:
                  if (curChar == 32)
                     { jjAddStates(51, 52); }
                  break;
               case 151:
                  if (curChar == 32)
                     { jjAddStates(53, 54); }
                  break;
               case 152:
                  if (kind > 102)
                     kind = 102;
                  break;
               case 164:
                  if (curChar == 32)
                     { jjAddStates(55, 56); }
                  break;
               case 166:
                  if (curChar == 32)
                     { jjAddStates(57, 58); }
                  break;
               case 167:
                  if (kind > 109)
                     kind = 109;
                  break;
               case 178:
                  if (curChar == 32)
                     { jjAddStates(59, 60); }
                  break;
               case 180:
                  if (curChar == 32)
                     { jjAddStates(61, 62); }
                  break;
               case 181:
                  if (kind > 115)
                     kind = 115;
                  break;
               case 187:
                  if (curChar == 32)
                     { jjAddStates(63, 64); }
                  break;
               case 189:
                  if (curChar == 32)
                     { jjAddStates(65, 66); }
                  break;
               case 190:
                  if (kind > 121)
                     kind = 121;
                  break;
               case 200:
                  if (curChar == 32)
                     { jjAddStates(67, 68); }
                  break;
               case 202:
                  if (curChar == 32)
                     { jjAddStates(69, 70); }
                  break;
               case 203:
                  if (kind > 128)
                     kind = 128;
                  break;
               case 209:
                  if (curChar == 32)
                     { jjAddStates(71, 72); }
                  break;
               case 211:
                  if (curChar == 32)
                     { jjAddStates(73, 74); }
                  break;
               case 212:
                  if (kind > 145)
                     kind = 145;
                  break;
               case 222:
                  if (curChar == 32)
                     { jjAddStates(75, 76); }
                  break;
               case 224:
                  if (curChar == 32)
                     { jjAddStates(77, 78); }
                  break;
               case 225:
                  if (kind > 151)
                     kind = 151;
                  break;
               case 235:
                  if (curChar == 32)
                     { jjAddStates(79, 80); }
                  break;
               case 237:
                  if (curChar == 32)
                     { jjAddStates(81, 82); }
                  break;
               case 238:
                  if (kind > 162)
                     kind = 162;
                  break;
               case 247:
                  if (curChar == 32)
                     { jjAddStates(83, 84); }
                  break;
               case 249:
                  if (curChar == 32)
                     { jjAddStates(85, 86); }
                  break;
               case 250:
                  if (kind > 168)
                     kind = 168;
                  break;
               case 260:
                  if (curChar == 32)
                     { jjAddStates(87, 88); }
                  break;
               case 262:
                  if (curChar == 32)
                     { jjAddStates(89, 90); }
                  break;
               case 263:
                  if (kind > 174)
                     kind = 174;
                  break;
               case 270:
                  if (curChar == 32)
                     { jjAddStates(91, 92); }
                  break;
               case 272:
                  if (curChar == 32)
                     { jjAddStates(93, 94); }
                  break;
               case 273:
                  if (kind > 182)
                     kind = 182;
                  break;
               case 277:
                  if (curChar == 32)
                     { jjAddStates(95, 96); }
                  break;
               case 279:
                  if (curChar == 32)
                     { jjAddStates(97, 98); }
                  break;
               case 280:
                  if (kind > 188)
                     kind = 188;
                  break;
               case 284:
                  if (curChar == 32)
                     { jjAddStates(99, 100); }
                  break;
               case 286:
                  if (curChar == 32)
                     { jjAddStates(101, 102); }
                  break;
               case 287:
                  if (kind > 196)
                     kind = 196;
                  break;
               case 290:
                  if (curChar == 32)
                     { jjAddStates(103, 104); }
                  break;
               case 292:
                  if (curChar == 32)
                     { jjAddStates(105, 106); }
                  break;
               case 293:
                  if (kind > 202)
                     kind = 202;
                  break;
               case 297:
                  if (curChar == 32)
                     { jjAddStates(107, 108); }
                  break;
               case 299:
                  if (curChar == 32)
                     { jjAddStates(109, 110); }
                  break;
               case 300:
                  if (kind > 224)
                     kind = 224;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     { jjCheckNAdd(2); }
                  }
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 236)
                        kind = 236;
                     { jjCheckNAddTwoStates(4, 5); }
                  }
                  break;
               case 303:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     { jjCheckNAdd(2); }
                  }
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 236)
                        kind = 236;
                     { jjCheckNAddTwoStates(4, 5); }
                  }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  { jjCheckNAdd(2); }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  { jjCheckNAdd(2); }
                  break;
               case 4:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (kind > 230)
                     kind = 230;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
               case 13:
                  { jjCheckNAddStates(4, 6); }
                  break;
               case 18:
                  if (curChar == 103)
                     { jjAddStates(9, 10); }
                  break;
               case 20:
                  if (kind > 4)
                     kind = 4;
                  break;
               case 21:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 22:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (curChar == 109)
                     { jjAddStates(13, 14); }
                  break;
               case 26:
                  if (kind > 10)
                     kind = 10;
                  break;
               case 27:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  if (curChar == 76)
                     { jjAddStates(17, 18); }
                  break;
               case 36:
                  if (kind > 16)
                     kind = 16;
                  break;
               case 37:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 38:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 89)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 43:
                  if (curChar == 115)
                     { jjAddStates(21, 22); }
                  break;
               case 45:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 46:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 47:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 54:
                  if (curChar == 114)
                     { jjAddStates(25, 26); }
                  break;
               case 56:
                  if (kind > 28)
                     kind = 28;
                  break;
               case 57:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 58:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if (curChar == 116)
                     { jjAddStates(29, 30); }
                  break;
               case 66:
                  if (kind > 36)
                     kind = 36;
                  break;
               case 67:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 68:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 75:
                  if (curChar == 101)
                     { jjAddStates(33, 34); }
                  break;
               case 77:
                  if (kind > 44)
                     kind = 44;
                  break;
               case 78:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 79:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 95:
                  if (curChar == 108)
                     { jjAddStates(37, 38); }
                  break;
               case 97:
                  if (kind > 50)
                     kind = 50;
                  break;
               case 98:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 99:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 116:
                  if (curChar == 115)
                     { jjAddStates(41, 42); }
                  break;
               case 118:
                  if (kind > 58)
                     kind = 58;
                  break;
               case 119:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 120:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 131:
                  if (curChar == 110)
                     { jjAddStates(45, 46); }
                  break;
               case 133:
                  if (kind > 66)
                     kind = 66;
                  break;
               case 134:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 135:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 145:
                  if (curChar == 112)
                     { jjAddStates(49, 50); }
                  break;
               case 147:
                  if (kind > 96)
                     kind = 96;
                  break;
               case 148:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 150:
                  if (curChar == 115)
                     { jjAddStates(53, 54); }
                  break;
               case 152:
                  if (kind > 102)
                     kind = 102;
                  break;
               case 153:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 154:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 165:
                  if (curChar == 110)
                     { jjAddStates(57, 58); }
                  break;
               case 167:
                  if (kind > 109)
                     kind = 109;
                  break;
               case 168:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 169:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 179:
                  if (curChar == 108)
                     { jjAddStates(61, 62); }
                  break;
               case 181:
                  if (kind > 115)
                     kind = 115;
                  break;
               case 182:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 183:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 188:
                  if (curChar == 82)
                     { jjAddStates(65, 66); }
                  break;
               case 190:
                  if (kind > 121)
                     kind = 121;
                  break;
               case 191:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 192:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 201:
                  if (curChar == 108)
                     { jjAddStates(69, 70); }
                  break;
               case 203:
                  if (kind > 128)
                     kind = 128;
                  break;
               case 204:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 205:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 210:
                  if (curChar == 110)
                     { jjAddStates(73, 74); }
                  break;
               case 212:
                  if (kind > 145)
                     kind = 145;
                  break;
               case 213:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 214:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 223:
                  if (curChar == 115)
                     { jjAddStates(77, 78); }
                  break;
               case 225:
                  if (kind > 151)
                     kind = 151;
                  break;
               case 226:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 227:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 230:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 231:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 233:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 236:
                  if (curChar == 116)
                     { jjAddStates(81, 82); }
                  break;
               case 238:
                  if (kind > 162)
                     kind = 162;
                  break;
               case 239:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 240:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 243:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 245:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 248:
                  if (curChar == 114)
                     { jjAddStates(85, 86); }
                  break;
               case 250:
                  if (kind > 168)
                     kind = 168;
                  break;
               case 251:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 252:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 253:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 254:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 255:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 259:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 261:
                  if (curChar == 82)
                     { jjAddStates(89, 90); }
                  break;
               case 263:
                  if (kind > 174)
                     kind = 174;
                  break;
               case 264:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 265:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 271:
                  if (curChar == 101)
                     { jjAddStates(93, 94); }
                  break;
               case 273:
                  if (kind > 182)
                     kind = 182;
                  break;
               case 274:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 275:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 276:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 278:
                  if (curChar == 110)
                     { jjAddStates(97, 98); }
                  break;
               case 280:
                  if (kind > 188)
                     kind = 188;
                  break;
               case 281:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 282:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 283:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 285:
                  if (curChar == 109)
                     { jjAddStates(101, 102); }
                  break;
               case 287:
                  if (kind > 196)
                     kind = 196;
                  break;
               case 288:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 289:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 291:
                  if (curChar == 115)
                     { jjAddStates(105, 106); }
                  break;
               case 293:
                  if (kind > 202)
                     kind = 202;
                  break;
               case 294:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 295:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 296:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 295;
                  break;
               case 298:
                  if (curChar == 103)
                     { jjAddStates(109, 110); }
                  break;
               case 300:
                  if (kind > 224)
                     kind = 224;
                  break;
               case 301:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 302:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 301;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(111, 162); }
                  break;
               case 9:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 230)
                     kind = 230;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 20:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 4)
                     kind = 4;
                  break;
               case 26:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               case 36:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               case 45:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               case 56:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 28)
                     kind = 28;
                  break;
               case 66:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 36)
                     kind = 36;
                  break;
               case 77:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 44)
                     kind = 44;
                  break;
               case 97:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 50)
                     kind = 50;
                  break;
               case 118:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 58)
                     kind = 58;
                  break;
               case 133:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 66)
                     kind = 66;
                  break;
               case 147:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 96)
                     kind = 96;
                  break;
               case 152:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 102)
                     kind = 102;
                  break;
               case 167:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 109)
                     kind = 109;
                  break;
               case 181:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 115)
                     kind = 115;
                  break;
               case 190:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 121)
                     kind = 121;
                  break;
               case 203:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 128)
                     kind = 128;
                  break;
               case 212:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 145)
                     kind = 145;
                  break;
               case 225:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 151)
                     kind = 151;
                  break;
               case 238:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 162)
                     kind = 162;
                  break;
               case 250:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 168)
                     kind = 168;
                  break;
               case 263:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 174)
                     kind = 174;
                  break;
               case 273:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 182)
                     kind = 182;
                  break;
               case 280:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 188)
                     kind = 188;
                  break;
               case 287:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 196)
                     kind = 196;
                  break;
               case 293:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 202)
                     kind = 202;
                  break;
               case 300:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 224)
                     kind = 224;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 303 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_19(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 67);
      case 10217:
         return jjStopAtPos(0, 70);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_13(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 45);
      case 10217:
         return jjStopAtPos(0, 48);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_32(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 130);
      case 10217:
         return jjStopAtPos(0, 131);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_36(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 153);
      case 10217:
         return jjStopAtPos(0, 154);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_38(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 164);
      case 10217:
         return jjStopAtPos(0, 165);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 6);
      case 10217:
         return jjStopAtPos(0, 7);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_9(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 29);
      case 10217:
         return jjStopAtPos(0, 32);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_14(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 46);
      case 10217:
         return jjStopAtPos(0, 47);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_27(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 116);
      case 10217:
         return jjStopAtPos(0, 119);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_43(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 183);
      case 10217:
         return jjStopAtPos(0, 186);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 12);
      case 10217:
         return jjStopAtPos(0, 13);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_24(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 104);
      case 10217:
         return jjStopAtPos(0, 105);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_8(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 24);
      case 10217:
         return jjStopAtPos(0, 25);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   8, 10, 5, 6, 11, 12, 15, 17, 22, 19, 20, 23, 32, 25, 26, 33, 
   41, 35, 36, 42, 52, 44, 45, 53, 62, 55, 56, 63, 73, 65, 66, 74, 
   93, 76, 77, 94, 114, 96, 97, 115, 129, 117, 118, 130, 143, 132, 133, 144, 
   148, 146, 147, 149, 163, 151, 152, 164, 177, 166, 167, 178, 186, 180, 181, 187, 
   199, 189, 190, 200, 208, 202, 203, 209, 221, 211, 212, 222, 234, 224, 225, 235, 
   246, 237, 238, 247, 259, 249, 250, 260, 269, 262, 263, 270, 276, 272, 273, 277, 
   283, 279, 280, 284, 289, 286, 287, 290, 296, 292, 293, 297, 302, 299, 300, 17, 
   22, 23, 32, 33, 41, 42, 52, 53, 62, 63, 73, 74, 93, 94, 114, 115, 
   129, 130, 143, 144, 148, 149, 163, 164, 177, 178, 186, 187, 199, 200, 208, 209, 
   221, 222, 234, 235, 246, 247, 259, 260, 269, 270, 276, 277, 283, 284, 289, 290, 
   296, 297, 302, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\54", "\114\123\114", "\114\123\122", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\43", "\46", null, null, 
null, null, null, null, "\50", "\51", null, null, null, null, null, null, null, null, 
null, null, null, null, "\173", "\175", null, null, null, null, null, null, 
"\104\103\111", "\75", null, null, null, null, null, null, "\101\104\104", "\101\116\104", 
"\102", "\102\105\121", "\102\107\105", "\102\107\124", "\102\114", "\102\114\105", 
"\102\114\124", "\102\116\105", "\103\115\120", "\105\117\122", "\114\104\115\106\104", "\41", 
"\114\104\122", "\114\104\122\102", "\115\117\126", "\115\125\114", "\115\126\116", 
"\117\122\122", "\123\124\115\106\104", "\123\124\122", "\123\124\122\102", "\123\125\102", 
null, null, null, null, null, null, null, null, null, null, null, null, 
"\146\165\156\143\164\151\157\156", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\145\154\163\145", null, null, null, null, null, null, 
"\174\174", "\46\46", "\41\75", "\75\75", "\74", "\74\75", "\76", "\76\75", "\53", "\55", 
"\52", null, null, null, null, null, null, null, null, null, null, null, null, "\73", 
"\151\146", "\162\145\164\165\162\156", "\166\141\162", "\167\150\151\154\145", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\142\157\157\154\145\141\156", "\151\156\164", null, null, null, null, 
null, null, null, null, null, null, null, null, "\133", "\135", null, null, null, 
null, null, null, null, null, null, null, null, null, "\114\122", "\120\103", 
"\122\60", "\122\61", "\122\61\60", "\122\61\61", "\122\61\62", "\122\62", "\122\63", 
"\122\64", "\122\65", "\122\66", "\122\67", "\122\70", "\122\71", "\123\120", null, null, 
null, null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 21)
         {
            jjmatchedKind = 21;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 21)
         {
            jjmatchedKind = 21;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 27)
         {
            jjmatchedKind = 27;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         if (jjmatchedPos == 0 && jjmatchedKind > 27)
         {
            jjmatchedKind = 27;
         }
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         if (jjmatchedPos == 0 && jjmatchedKind > 33)
         {
            jjmatchedKind = 33;
         }
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         if (jjmatchedPos == 0 && jjmatchedKind > 33)
         {
            jjmatchedKind = 33;
         }
         break;
       case 11:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         if (jjmatchedPos == 0 && jjmatchedKind > 41)
         {
            jjmatchedKind = 41;
         }
         break;
       case 12:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_12();
         if (jjmatchedPos == 0 && jjmatchedKind > 41)
         {
            jjmatchedKind = 41;
         }
         break;
       case 13:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_13();
         if (jjmatchedPos == 0 && jjmatchedKind > 49)
         {
            jjmatchedKind = 49;
         }
         break;
       case 14:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_14();
         if (jjmatchedPos == 0 && jjmatchedKind > 49)
         {
            jjmatchedKind = 49;
         }
         break;
       case 15:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_15();
         if (jjmatchedPos == 0 && jjmatchedKind > 55)
         {
            jjmatchedKind = 55;
         }
         break;
       case 16:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_16();
         if (jjmatchedPos == 0 && jjmatchedKind > 55)
         {
            jjmatchedKind = 55;
         }
         break;
       case 17:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_17();
         if (jjmatchedPos == 0 && jjmatchedKind > 63)
         {
            jjmatchedKind = 63;
         }
         break;
       case 18:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_18();
         if (jjmatchedPos == 0 && jjmatchedKind > 63)
         {
            jjmatchedKind = 63;
         }
         break;
       case 19:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_19();
         if (jjmatchedPos == 0 && jjmatchedKind > 71)
         {
            jjmatchedKind = 71;
         }
         break;
       case 20:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_20();
         if (jjmatchedPos == 0 && jjmatchedKind > 71)
         {
            jjmatchedKind = 71;
         }
         break;
       case 21:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_21();
         if (jjmatchedPos == 0 && jjmatchedKind > 101)
         {
            jjmatchedKind = 101;
         }
         break;
       case 22:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_22();
         if (jjmatchedPos == 0 && jjmatchedKind > 101)
         {
            jjmatchedKind = 101;
         }
         break;
       case 23:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_23();
         if (jjmatchedPos == 0 && jjmatchedKind > 107)
         {
            jjmatchedKind = 107;
         }
         break;
       case 24:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_24();
         if (jjmatchedPos == 0 && jjmatchedKind > 107)
         {
            jjmatchedKind = 107;
         }
         break;
       case 25:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_25();
         if (jjmatchedPos == 0 && jjmatchedKind > 114)
         {
            jjmatchedKind = 114;
         }
         break;
       case 26:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_26();
         if (jjmatchedPos == 0 && jjmatchedKind > 114)
         {
            jjmatchedKind = 114;
         }
         break;
       case 27:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_27();
         if (jjmatchedPos == 0 && jjmatchedKind > 120)
         {
            jjmatchedKind = 120;
         }
         break;
       case 28:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_28();
         if (jjmatchedPos == 0 && jjmatchedKind > 120)
         {
            jjmatchedKind = 120;
         }
         break;
       case 29:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_29();
         if (jjmatchedPos == 0 && jjmatchedKind > 126)
         {
            jjmatchedKind = 126;
         }
         break;
       case 30:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_30();
         if (jjmatchedPos == 0 && jjmatchedKind > 126)
         {
            jjmatchedKind = 126;
         }
         break;
       case 31:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_31();
         if (jjmatchedPos == 0 && jjmatchedKind > 133)
         {
            jjmatchedKind = 133;
         }
         break;
       case 32:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_32();
         if (jjmatchedPos == 0 && jjmatchedKind > 133)
         {
            jjmatchedKind = 133;
         }
         break;
       case 33:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_33();
         if (jjmatchedPos == 0 && jjmatchedKind > 150)
         {
            jjmatchedKind = 150;
         }
         break;
       case 34:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_34();
         if (jjmatchedPos == 0 && jjmatchedKind > 150)
         {
            jjmatchedKind = 150;
         }
         break;
       case 35:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_35();
         if (jjmatchedPos == 0 && jjmatchedKind > 156)
         {
            jjmatchedKind = 156;
         }
         break;
       case 36:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_36();
         if (jjmatchedPos == 0 && jjmatchedKind > 156)
         {
            jjmatchedKind = 156;
         }
         break;
       case 37:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_37();
         if (jjmatchedPos == 0 && jjmatchedKind > 167)
         {
            jjmatchedKind = 167;
         }
         break;
       case 38:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_38();
         if (jjmatchedPos == 0 && jjmatchedKind > 167)
         {
            jjmatchedKind = 167;
         }
         break;
       case 39:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_39();
         if (jjmatchedPos == 0 && jjmatchedKind > 173)
         {
            jjmatchedKind = 173;
         }
         break;
       case 40:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_40();
         if (jjmatchedPos == 0 && jjmatchedKind > 173)
         {
            jjmatchedKind = 173;
         }
         break;
       case 41:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_41();
         if (jjmatchedPos == 0 && jjmatchedKind > 179)
         {
            jjmatchedKind = 179;
         }
         break;
       case 42:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_42();
         if (jjmatchedPos == 0 && jjmatchedKind > 179)
         {
            jjmatchedKind = 179;
         }
         break;
       case 43:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_43();
         if (jjmatchedPos == 0 && jjmatchedKind > 187)
         {
            jjmatchedKind = 187;
         }
         break;
       case 44:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_44();
         if (jjmatchedPos == 0 && jjmatchedKind > 187)
         {
            jjmatchedKind = 187;
         }
         break;
       case 45:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_45();
         if (jjmatchedPos == 0 && jjmatchedKind > 193)
         {
            jjmatchedKind = 193;
         }
         break;
       case 46:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_46();
         if (jjmatchedPos == 0 && jjmatchedKind > 193)
         {
            jjmatchedKind = 193;
         }
         break;
       case 47:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_47();
         if (jjmatchedPos == 0 && jjmatchedKind > 201)
         {
            jjmatchedKind = 201;
         }
         break;
       case 48:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_48();
         if (jjmatchedPos == 0 && jjmatchedKind > 201)
         {
            jjmatchedKind = 201;
         }
         break;
       case 49:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_49();
         if (jjmatchedPos == 0 && jjmatchedKind > 207)
         {
            jjmatchedKind = 207;
         }
         break;
       case 50:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_50();
         if (jjmatchedPos == 0 && jjmatchedKind > 207)
         {
            jjmatchedKind = 207;
         }
         break;
       case 51:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_51();
         if (jjmatchedPos == 0 && jjmatchedKind > 229)
         {
            jjmatchedKind = 229;
         }
         break;
       case 52:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_52();
         if (jjmatchedPos == 0 && jjmatchedKind > 229)
         {
            jjmatchedKind = 229;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 4 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                 nesting = 0; nestedState = curLexState;
         break;
      case 5 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  nesting = 1;
         break;
      case 6 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         nesting++;
         break;
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         if (--nesting <= 0) SwitchTo(IN_META_Arg);
         break;
      case 10 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                     nesting = 0; nestedState = curLexState;
         break;
      case 11 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                      nesting = 1;
         break;
      case 12 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             nesting++;
         break;
      case 13 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             if (--nesting <= 0) SwitchTo(IN_META_Program);
         break;
      case 16 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                    nesting = 0; nestedState = curLexState;
         break;
      case 17 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                     nesting = 1;
         break;
      case 18 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            nesting++;
         break;
      case 19 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            if (--nesting <= 0) SwitchTo(IN_META_SYMBOL);
         break;
      case 22 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                      nesting = 0; nestedState = curLexState;
         break;
      case 23 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                       nesting = 1;
         break;
      case 24 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                              nesting++;
         break;
      case 25 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                              if (--nesting <= 0) SwitchTo(IN_META_Integers);
         break;
      case 28 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                     nesting = 0; nestedState = curLexState;
         break;
      case 29 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                      nesting = 1;
         break;
      case 30 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             nesting++;
         break;
      case 31 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             if (--nesting <= 0) SwitchTo(IN_META_Integer);
         break;
      case 36 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                      nesting = 0; nestedState = curLexState;
         break;
      case 37 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                       nesting = 1;
         break;
      case 38 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                              nesting++;
         break;
      case 39 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                              if (--nesting <= 0) SwitchTo(IN_META_Constant);
         break;
      case 44 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                               nesting = 0; nestedState = curLexState;
         break;
      case 45 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                nesting = 1;
         break;
      case 46 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                       nesting++;
         break;
      case 47 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                       if (--nesting <= 0) SwitchTo(IN_META_ArgumentSignature);
         break;
      case 50 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                                nesting = 0; nestedState = curLexState;
         break;
      case 51 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                 nesting = 1;
         break;
      case 52 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                        nesting++;
         break;
      case 53 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                        if (--nesting <= 0) SwitchTo(IN_META_TypeIdentifierTail);
         break;
      case 58 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                          nesting = 0; nestedState = curLexState;
         break;
      case 59 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                           nesting = 1;
         break;
      case 60 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                  nesting++;
         break;
      case 61 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                  if (--nesting <= 0) SwitchTo(IN_META_Instructions);
         break;
      case 66 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                         nesting = 0; nestedState = curLexState;
         break;
      case 67 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          nesting = 1;
         break;
      case 68 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                 nesting++;
         break;
      case 69 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                 if (--nesting <= 0) SwitchTo(IN_META_Instruction);
         break;
      case 96 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                nesting = 0; nestedState = curLexState;
         break;
      case 97 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 nesting = 1;
         break;
      case 98 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                        nesting++;
         break;
      case 99 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                        if (--nesting <= 0) SwitchTo(IN_META_Op);
         break;
      case 102 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                          nesting = 0; nestedState = curLexState;
         break;
      case 103 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                           nesting = 1;
         break;
      case 104 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                  nesting++;
         break;
      case 105 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                  if (--nesting <= 0) SwitchTo(IN_META_Declarations);
         break;
      case 109 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                         nesting = 0; nestedState = curLexState;
         break;
      case 110 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          nesting = 1;
         break;
      case 111 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                 nesting++;
         break;
      case 112 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                 if (--nesting <= 0) SwitchTo(IN_META_Declaration);
         break;
      case 115 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                    nesting = 0; nestedState = curLexState;
         break;
      case 116 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                     nesting = 1;
         break;
      case 117 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            nesting++;
         break;
      case 118 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            if (--nesting <= 0) SwitchTo(IN_META_Symbol);
         break;
      case 121 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                        nesting = 0; nestedState = curLexState;
         break;
      case 122 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         nesting = 1;
         break;
      case 123 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                nesting++;
         break;
      case 124 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                if (--nesting <= 0) SwitchTo(IN_META_IDENTIFIER);
         break;
      case 128 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                    nesting = 0; nestedState = curLexState;
         break;
      case 129 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                     nesting = 1;
         break;
      case 130 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            nesting++;
         break;
      case 131 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            if (--nesting <= 0) SwitchTo(IN_META_IfTail);
         break;
      case 145 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                        nesting = 0; nestedState = curLexState;
         break;
      case 146 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         nesting = 1;
         break;
      case 147 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                nesting++;
         break;
      case 148 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                if (--nesting <= 0) SwitchTo(IN_META_Expression);
         break;
      case 151 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                        nesting = 0; nestedState = curLexState;
         break;
      case 152 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         nesting = 1;
         break;
      case 153 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                nesting++;
         break;
      case 154 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                if (--nesting <= 0) SwitchTo(IN_META_Statements);
         break;
      case 162 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                       nesting = 0; nestedState = curLexState;
         break;
      case 163 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                        nesting = 1;
         break;
      case 164 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                               nesting++;
         break;
      case 165 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                               if (--nesting <= 0) SwitchTo(IN_META_Statement);
         break;
      case 168 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                        nesting = 0; nestedState = curLexState;
         break;
      case 169 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         nesting = 1;
         break;
      case 170 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                nesting++;
         break;
      case 171 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                if (--nesting <= 0) SwitchTo(IN_META_Identifier);
         break;
      case 174 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                     nesting = 0; nestedState = curLexState;
         break;
      case 175 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                      nesting = 1;
         break;
      case 176 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             nesting++;
         break;
      case 177 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             if (--nesting <= 0) SwitchTo(IN_META_INTEGER);
         break;
      case 182 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                  nesting = 0; nestedState = curLexState;
         break;
      case 183 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                   nesting = 1;
         break;
      case 184 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          nesting++;
         break;
      case 185 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          if (--nesting <= 0) SwitchTo(IN_META_Type);
         break;
      case 188 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                  nesting = 0; nestedState = curLexState;
         break;
      case 189 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                   nesting = 1;
         break;
      case 190 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          nesting++;
         break;
      case 191 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          if (--nesting <= 0) SwitchTo(IN_META_Sign);
         break;
      case 196 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                 nesting = 0; nestedState = curLexState;
         break;
      case 197 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  nesting = 1;
         break;
      case 198 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         nesting++;
         break;
      case 199 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         if (--nesting <= 0) SwitchTo(IN_META_Mem);
         break;
      case 202 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                  nesting = 0; nestedState = curLexState;
         break;
      case 203 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                   nesting = 1;
         break;
      case 204 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          nesting++;
         break;
      case 205 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          if (--nesting <= 0) SwitchTo(IN_META_Regs);
         break;
      case 224 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                 nesting = 0; nestedState = curLexState;
         break;
      case 225 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  nesting = 1;
         break;
      case 226 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         nesting++;
         break;
      case 227 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         if (--nesting <= 0) SwitchTo(IN_META_Reg);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                    SwitchTo(nestedState);
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                            SwitchTo(nestedState);
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                          SwitchTo(nestedState);
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                              SwitchTo(nestedState);
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                            SwitchTo(nestedState);
         break;
      case 40 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                              SwitchTo(nestedState);
         break;
      case 48 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                SwitchTo(nestedState);
         break;
      case 54 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                  SwitchTo(nestedState);
         break;
      case 62 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                      SwitchTo(nestedState);
         break;
      case 70 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                    SwitchTo(nestedState);
         break;
      case 100 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                  SwitchTo(nestedState);
         break;
      case 106 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                      SwitchTo(nestedState);
         break;
      case 113 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                    SwitchTo(nestedState);
         break;
      case 119 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                          SwitchTo(nestedState);
         break;
      case 125 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  SwitchTo(nestedState);
         break;
      case 132 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                          SwitchTo(nestedState);
         break;
      case 149 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  SwitchTo(nestedState);
         break;
      case 155 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  SwitchTo(nestedState);
         break;
      case 166 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                SwitchTo(nestedState);
         break;
      case 172 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  SwitchTo(nestedState);
         break;
      case 178 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                            SwitchTo(nestedState);
         break;
      case 186 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                      SwitchTo(nestedState);
         break;
      case 192 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                      SwitchTo(nestedState);
         break;
      case 200 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                    SwitchTo(nestedState);
         break;
      case 206 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                      SwitchTo(nestedState);
         break;
      case 228 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                    SwitchTo(nestedState);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public Pr3BaseEmbedTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public Pr3BaseEmbedTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 303; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 53 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_META_Arg",
   "IN_NESTED_META_Arg",
   "IN_META_Program",
   "IN_NESTED_META_Program",
   "IN_META_SYMBOL",
   "IN_NESTED_META_SYMBOL",
   "IN_META_Integers",
   "IN_NESTED_META_Integers",
   "IN_META_Integer",
   "IN_NESTED_META_Integer",
   "IN_META_Constant",
   "IN_NESTED_META_Constant",
   "IN_META_ArgumentSignature",
   "IN_NESTED_META_ArgumentSignature",
   "IN_META_TypeIdentifierTail",
   "IN_NESTED_META_TypeIdentifierTail",
   "IN_META_Instructions",
   "IN_NESTED_META_Instructions",
   "IN_META_Instruction",
   "IN_NESTED_META_Instruction",
   "IN_META_Op",
   "IN_NESTED_META_Op",
   "IN_META_Declarations",
   "IN_NESTED_META_Declarations",
   "IN_META_Declaration",
   "IN_NESTED_META_Declaration",
   "IN_META_Symbol",
   "IN_NESTED_META_Symbol",
   "IN_META_IDENTIFIER",
   "IN_NESTED_META_IDENTIFIER",
   "IN_META_IfTail",
   "IN_NESTED_META_IfTail",
   "IN_META_Expression",
   "IN_NESTED_META_Expression",
   "IN_META_Statements",
   "IN_NESTED_META_Statements",
   "IN_META_Statement",
   "IN_NESTED_META_Statement",
   "IN_META_Identifier",
   "IN_NESTED_META_Identifier",
   "IN_META_INTEGER",
   "IN_NESTED_META_INTEGER",
   "IN_META_Type",
   "IN_NESTED_META_Type",
   "IN_META_Sign",
   "IN_NESTED_META_Sign",
   "IN_META_Mem",
   "IN_NESTED_META_Mem",
   "IN_META_Regs",
   "IN_NESTED_META_Regs",
   "IN_META_Reg",
   "IN_NESTED_META_Reg",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, 1, 2, -1, -1, -1, -1, 3, 4, -1, -1, -1, -1, 5, 6, -1, -1, -1, -1, 7, 8, -1, 
   -1, -1, -1, 9, 10, -1, -1, -1, -1, -1, -1, 11, 12, -1, -1, -1, -1, -1, -1, 13, 14, -1, -1, -1, -1, 
   15, 16, -1, -1, -1, -1, -1, -1, 17, 18, -1, -1, -1, -1, -1, -1, 19, 20, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 22, -1, -1, 
   -1, -1, 23, 24, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 27, 28, -1, -1, -1, -1, 29, 30, -1, -1, 
   -1, -1, -1, 31, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 34, -1, -1, -1, 
   -1, 35, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, -1, -1, -1, 41, 
   42, -1, -1, -1, -1, -1, -1, 43, 44, -1, -1, -1, -1, 45, 46, -1, -1, -1, -1, -1, -1, 47, 48, -1, -1, 
   -1, -1, 49, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 
   52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x43410d0d0410410fL, 0xa0821410ffffff43L, 0x4341043e821ffd0L, 0x1190ffff410dL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x0L, 0x0L, 0x4000000000L, 
};
static final long[] jjtoMore = {
   0xbcbef2f2fbefbef0L, 0x5f7debef000000bcL, 0xfbcbefbc17de002fL, 0x2f0000bef2L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[303];
    private final int[] jjstateSet = new int[2 * 303];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
