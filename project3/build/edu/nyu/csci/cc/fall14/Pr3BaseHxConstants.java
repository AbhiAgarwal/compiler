/* Generated By:JavaCC: Do not edit this line. Pr3BaseHxConstants.java */
package edu.nyu.csci.cc.fall14;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Pr3BaseHxConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int T_HX_CONCRETE = 49;
  /** RegularExpression Id. */
  int T_HX_PP_UNCONCRETE = 59;
  /** RegularExpression Id. */
  int T_HX_SEMI = 62;
  /** RegularExpression Id. */
  int T_HX_BAR = 63;
  /** RegularExpression Id. */
  int T_HX_LPAREN = 64;
  /** RegularExpression Id. */
  int T_HX_RPAREN = 65;
  /** RegularExpression Id. */
  int T_HX_STAR = 66;
  /** RegularExpression Id. */
  int T_HX_PLUS = 67;
  /** RegularExpression Id. */
  int T_HX_QUEST = 68;
  /** RegularExpression Id. */
  int T_HX_SUB = 69;
  /** RegularExpression Id. */
  int T_HX_DOT = 70;
  /** RegularExpression Id. */
  int T_HX_COLON = 71;
  /** RegularExpression Id. */
  int T_HX_LBRACE = 72;
  /** RegularExpression Id. */
  int T_HX_RBRACE = 73;
  /** RegularExpression Id. */
  int T_HX_LBRACKET = 74;
  /** RegularExpression Id. */
  int T_HX_RBRACKET = 75;
  /** RegularExpression Id. */
  int T_HX_COMMA = 76;
  /** RegularExpression Id. */
  int T_HX_FORALL = 77;
  /** RegularExpression Id. */
  int T_HX_ARROW = 78;
  /** RegularExpression Id. */
  int T_HX_UP = 79;
  /** RegularExpression Id. */
  int T_HX_DOWN = 80;
  /** RegularExpression Id. */
  int T_HX_NOT = 81;
  /** RegularExpression Id. */
  int T_HX_AT = 82;
  /** RegularExpression Id. */
  int T_HX_DOTTEDNAME = 83;
  /** RegularExpression Id. */
  int T_HX_MODULE = 84;
  /** RegularExpression Id. */
  int T_HX_SORT = 85;
  /** RegularExpression Id. */
  int T_HX_MAIN = 86;
  /** RegularExpression Id. */
  int T_HX_DATA = 87;
  /** RegularExpression Id. */
  int T_HX_SCHEME = 88;
  /** RegularExpression Id. */
  int T_HX_AUTOMATIC = 89;
  /** RegularExpression Id. */
  int T_HX_SYMBOL = 90;
  /** RegularExpression Id. */
  int T_HX_STATIC = 91;
  /** RegularExpression Id. */
  int T_HX_ATTRIBUTE = 92;
  /** RegularExpression Id. */
  int T_HX_COMPOSE = 93;
  /** RegularExpression Id. */
  int T_HX_SUGAR = 94;
  /** RegularExpression Id. */
  int T_HX_RULE = 95;
  /** RegularExpression Id. */
  int T_HX_PRIORITY = 96;
  /** RegularExpression Id. */
  int T_HX_DEFAULT = 97;
  /** RegularExpression Id. */
  int T_HX_IMPORT = 98;
  /** RegularExpression Id. */
  int T_HX_TAG = 99;
  /** RegularExpression Id. */
  int T_HX_BINDS = 100;
  /** RegularExpression Id. */
  int T_HX_AS = 101;
  /** RegularExpression Id. */
  int T_HX_SPACE = 102;
  /** RegularExpression Id. */
  int T_HX_TOKEN = 103;
  /** RegularExpression Id. */
  int T_HX_FRAGMENT = 104;
  /** RegularExpression Id. */
  int T_HX_NESTED = 105;
  /** RegularExpression Id. */
  int T_HX_FRAGMENT_REF = 106;
  /** RegularExpression Id. */
  int T_HX_RE_NAME = 107;
  /** RegularExpression Id. */
  int T_HX_RE_WORD = 108;
  /** RegularExpression Id. */
  int T_HX_META = 109;
  /** RegularExpression Id. */
  int T_HX_VAR = 110;
  /** RegularExpression Id. */
  int T_HX_NATURAL = 111;
  /** RegularExpression Id. */
  int T_HX_INTEGER = 112;
  /** RegularExpression Id. */
  int T_HX_UNNATURAL = 113;
  /** RegularExpression Id. */
  int T_HX_STRING = 114;
  /** RegularExpression Id. */
  int T_HX_STRING1CHAR = 115;
  /** RegularExpression Id. */
  int T_HX_STRING2CHAR = 116;
  /** RegularExpression Id. */
  int T_HX_ESCAPEDCHAR = 117;
  /** RegularExpression Id. */
  int T_HX_HEX = 118;
  /** RegularExpression Id. */
  int T_HX_CHAR_CLASS = 119;
  /** RegularExpression Id. */
  int T_HX_CC_NOT = 120;
  /** RegularExpression Id. */
  int T_HX_CC_RBRACKET = 121;
  /** RegularExpression Id. */
  int T_HX_CC_DASH = 122;
  /** RegularExpression Id. */
  int T_HX_CC_OTHER = 123;
  /** RegularExpression Id. */
  int T_HX_CC_SKIP = 124;
  /** RegularExpression Id. */
  int T_HX_PP_CONCRETE_SPACE = 125;
  /** RegularExpression Id. */
  int T_HX_PP_CONCRETE_WORD = 126;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int HX_RE = 1;
  /** Lexical state. */
  int HX_IN_CONCRETE = 2;
  /** Lexical state. */
  int HX_IN_NESTED_CONCRETE = 3;
  /** Lexical state. */
  int HX_NESTED_COMMENT = 4;
  /** Lexical state. */
  int HX_PP = 5;
  /** Lexical state. */
  int IN_PP_UNCONCRETE = 6;
  /** Lexical state. */
  int IN_PP_NESTED_UNCONCRETE = 7;
  /** Lexical state. */
  int HX_CC = 8;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"SYMBOL\"",
    "\"IDENTIFIER\"",
    "\"INTEGER\"",
    "\"Arg\"",
    "\"Program\"",
    "\"Integers\"",
    "\"Integer\"",
    "\"Constant\"",
    "\"ArgState\"",
    "\"Boolean\"",
    "\"ArgumentSignature\"",
    "\"TypeIdentifierTail\"",
    "\"Instructions\"",
    "\"Instruction\"",
    "\"Identifiers\"",
    "\"Op\"",
    "\"Declarations\"",
    "\"Declaration\"",
    "\"Symbol\"",
    "\"Subste\"",
    "\"IfTail\"",
    "\"Expression\"",
    "\"Statements\"",
    "\"Statement\"",
    "\"Identifier\"",
    "\"Type\"",
    "\"Sign\"",
    "\"Mem\"",
    "\"Regs\"",
    "\"Reg\"",
    "\"Compile\"",
    "\"CompileDeclarations\"",
    "\"CompileDeclaration\"",
    "\"Argument\"",
    "\"AllStatements\"",
    "\"SingleStatement\"",
    "\"SingleExpression\"",
    "\"T\"",
    "\"ArgumentIDSearching\"",
    "\"ArgumentIntSearching\"",
    "\"MoreSubste\"",
    "\"NoSubste\"",
    "\"SubsteAppend\"",
    "\"__HACS__\"",
    "\"\\u27e6\"",
    "\"\\u27e6\"",
    "\"\\u27e6\"",
    "\"\\u27e7\"",
    "\"\\u27e7\"",
    "<token of kind 50>",
    "\"/*\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 54>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 60>",
    "<token of kind 61>",
    "\";\"",
    "\"|\"",
    "\"(\"",
    "\")\"",
    "\"*\"",
    "\"+\"",
    "\"?\"",
    "\"_\"",
    "\".\"",
    "\":\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\"\\u2200\"",
    "\"\\u2192\"",
    "\"\\u2191\"",
    "\"\\u2193\"",
    "\"\\u00ac\"",
    "\"@\"",
    "<T_HX_DOTTEDNAME>",
    "\"module\"",
    "\"sort\"",
    "\"main\"",
    "\"data\"",
    "\"scheme\"",
    "\"automatic\"",
    "\"symbol\"",
    "\"static\"",
    "\"attribute\"",
    "\"compose\"",
    "\"sugar\"",
    "\"rule\"",
    "\"priority\"",
    "\"default\"",
    "\"import\"",
    "\"tag\"",
    "\"binds\"",
    "\"as\"",
    "\"space\"",
    "\"token\"",
    "\"fragment\"",
    "\"nested\"",
    "<T_HX_FRAGMENT_REF>",
    "<T_HX_RE_NAME>",
    "<T_HX_RE_WORD>",
    "<T_HX_META>",
    "<T_HX_VAR>",
    "<T_HX_NATURAL>",
    "<T_HX_INTEGER>",
    "<T_HX_UNNATURAL>",
    "<T_HX_STRING>",
    "<T_HX_STRING1CHAR>",
    "<T_HX_STRING2CHAR>",
    "<T_HX_ESCAPEDCHAR>",
    "<T_HX_HEX>",
    "<T_HX_CHAR_CLASS>",
    "\"^\"",
    "\"]\"",
    "\"-\"",
    "<T_HX_CC_OTHER>",
    "\"\\u0001\"",
    "<T_HX_PP_CONCRETE_SPACE>",
    "<T_HX_PP_CONCRETE_WORD>",
  };

}
