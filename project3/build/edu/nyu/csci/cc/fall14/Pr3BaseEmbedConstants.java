/* Generated By:JavaCC: Do not edit this line. Pr3BaseEmbedConstants.java */
package edu.nyu.csci.cc.fall14;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Pr3BaseEmbedConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int T_meta_Program = 5;
  /** RegularExpression Id. */
  int T_meta_Integers = 12;
  /** RegularExpression Id. */
  int T_meta_Integer = 18;
  /** RegularExpression Id. */
  int T_meta_ArgumentSignature = 26;
  /** RegularExpression Id. */
  int T_meta_TypeIdentifierTail = 32;
  /** RegularExpression Id. */
  int T_meta_Instructions = 40;
  /** RegularExpression Id. */
  int T_meta_Instruction = 48;
  /** RegularExpression Id. */
  int T_meta_Op = 79;
  /** RegularExpression Id. */
  int T_meta_Declarations = 85;
  /** RegularExpression Id. */
  int T_meta_Declaration = 92;
  /** RegularExpression Id. */
  int T_meta_IDENTIFIER = 98;
  /** RegularExpression Id. */
  int T_meta_IfTail = 105;
  /** RegularExpression Id. */
  int T_meta_Expression = 122;
  /** RegularExpression Id. */
  int T_meta_Statements = 128;
  /** RegularExpression Id. */
  int T_meta_Statement = 139;
  /** RegularExpression Id. */
  int T_meta_Identifier = 145;
  /** RegularExpression Id. */
  int T_meta_INTEGER = 151;
  /** RegularExpression Id. */
  int T_meta_Type = 159;
  /** RegularExpression Id. */
  int T_meta_Reg = 181;
  /** RegularExpression Id. */
  int T_meta_Regs = 187;
  /** RegularExpression Id. */
  int T_meta_Arg = 195;
  /** RegularExpression Id. */
  int T_meta_Mem = 202;
  /** RegularExpression Id. */
  int T_meta_Sign = 208;
  /** RegularExpression Id. */
  int T_meta_Constant = 216;
  /** RegularExpression Id. */
  int T_IDENTIFIER = 219;
  /** RegularExpression Id. */
  int T_INTEGER = 220;
  /** RegularExpression Id. */
  int T_Letter = 221;
  /** RegularExpression Id. */
  int T_LetterEtc = 222;
  /** RegularExpression Id. */
  int T_Digit = 223;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_META_Program = 1;
  /** Lexical state. */
  int IN_NESTED_META_Program = 2;
  /** Lexical state. */
  int IN_META_Integers = 3;
  /** Lexical state. */
  int IN_NESTED_META_Integers = 4;
  /** Lexical state. */
  int IN_META_Integer = 5;
  /** Lexical state. */
  int IN_NESTED_META_Integer = 6;
  /** Lexical state. */
  int IN_META_ArgumentSignature = 7;
  /** Lexical state. */
  int IN_NESTED_META_ArgumentSignature = 8;
  /** Lexical state. */
  int IN_META_TypeIdentifierTail = 9;
  /** Lexical state. */
  int IN_NESTED_META_TypeIdentifierTail = 10;
  /** Lexical state. */
  int IN_META_Instructions = 11;
  /** Lexical state. */
  int IN_NESTED_META_Instructions = 12;
  /** Lexical state. */
  int IN_META_Instruction = 13;
  /** Lexical state. */
  int IN_NESTED_META_Instruction = 14;
  /** Lexical state. */
  int IN_META_Op = 15;
  /** Lexical state. */
  int IN_NESTED_META_Op = 16;
  /** Lexical state. */
  int IN_META_Declarations = 17;
  /** Lexical state. */
  int IN_NESTED_META_Declarations = 18;
  /** Lexical state. */
  int IN_META_Declaration = 19;
  /** Lexical state. */
  int IN_NESTED_META_Declaration = 20;
  /** Lexical state. */
  int IN_META_IDENTIFIER = 21;
  /** Lexical state. */
  int IN_NESTED_META_IDENTIFIER = 22;
  /** Lexical state. */
  int IN_META_IfTail = 23;
  /** Lexical state. */
  int IN_NESTED_META_IfTail = 24;
  /** Lexical state. */
  int IN_META_Expression = 25;
  /** Lexical state. */
  int IN_NESTED_META_Expression = 26;
  /** Lexical state. */
  int IN_META_Statements = 27;
  /** Lexical state. */
  int IN_NESTED_META_Statements = 28;
  /** Lexical state. */
  int IN_META_Statement = 29;
  /** Lexical state. */
  int IN_NESTED_META_Statement = 30;
  /** Lexical state. */
  int IN_META_Identifier = 31;
  /** Lexical state. */
  int IN_NESTED_META_Identifier = 32;
  /** Lexical state. */
  int IN_META_INTEGER = 33;
  /** Lexical state. */
  int IN_NESTED_META_INTEGER = 34;
  /** Lexical state. */
  int IN_META_Type = 35;
  /** Lexical state. */
  int IN_NESTED_META_Type = 36;
  /** Lexical state. */
  int IN_META_Reg = 37;
  /** Lexical state. */
  int IN_NESTED_META_Reg = 38;
  /** Lexical state. */
  int IN_META_Regs = 39;
  /** Lexical state. */
  int IN_NESTED_META_Regs = 40;
  /** Lexical state. */
  int IN_META_Arg = 41;
  /** Lexical state. */
  int IN_NESTED_META_Arg = 42;
  /** Lexical state. */
  int IN_META_Mem = 43;
  /** Lexical state. */
  int IN_NESTED_META_Mem = 44;
  /** Lexical state. */
  int IN_META_Sign = 45;
  /** Lexical state. */
  int IN_NESTED_META_Sign = 46;
  /** Lexical state. */
  int IN_META_Constant = 47;
  /** Lexical state. */
  int IN_NESTED_META_Constant = 48;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 6>",
    "\",\"",
    "<token of kind 8>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 13>",
    "<token of kind 14>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 19>",
    "\"(\"",
    "\")\"",
    "<token of kind 22>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 27>",
    "<token of kind 28>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 33>",
    "\"{\"",
    "\"}\"",
    "<token of kind 36>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 41>",
    "\"DCI\"",
    "\"=\"",
    "<token of kind 44>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 49>",
    "\"ADD\"",
    "\"AND\"",
    "\"B\"",
    "\"BEQ\"",
    "\"BGE\"",
    "\"BGT\"",
    "\"BL\"",
    "\"BLE\"",
    "\"BLT\"",
    "\"BNE\"",
    "\"CMP\"",
    "\"EOR\"",
    "\"LDMFD\"",
    "\"!\"",
    "\"]\"",
    "\"LDR\"",
    "\"LDRB\"",
    "\"MOV\"",
    "\"MUL\"",
    "\"MVN\"",
    "\"ORR\"",
    "\"STMFD\"",
    "\"STR\"",
    "\"STRB\"",
    "\"SUB\"",
    "<token of kind 75>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 80>",
    "<token of kind 81>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 86>",
    "\"function\"",
    "<token of kind 88>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 93>",
    "<token of kind 94>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 99>",
    "\"else\"",
    "<token of kind 101>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 106>",
    "\"||\"",
    "\"&&\"",
    "\"!=\"",
    "\"==\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "<token of kind 118>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 123>",
    "<token of kind 124>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 129>",
    "\";\"",
    "\"if\"",
    "\"return\"",
    "\"var\"",
    "\"while\"",
    "<token of kind 135>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 140>",
    "<token of kind 141>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 146>",
    "<token of kind 147>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 152>",
    "\"boolean\"",
    "\"int\"",
    "<token of kind 155>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 160>",
    "\"LR\"",
    "\"PC\"",
    "\"R0\"",
    "\"R1\"",
    "\"R10\"",
    "\"R11\"",
    "\"R12\"",
    "\"R2\"",
    "\"R3\"",
    "\"R4\"",
    "\"R5\"",
    "\"R6\"",
    "\"R7\"",
    "\"R8\"",
    "\"R9\"",
    "\"SP\"",
    "<token of kind 177>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 182>",
    "<token of kind 183>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 188>",
    "\"LSL\"",
    "\"LSR\"",
    "<token of kind 191>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 196>",
    "\"[\"",
    "<token of kind 198>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 203>",
    "<token of kind 204>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 209>",
    "\"#\"",
    "\"&\"",
    "<token of kind 212>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 217>",
    "<token of kind 218>",
    "<T_IDENTIFIER>",
    "<T_INTEGER>",
    "<T_Letter>",
    "<T_LetterEtc>",
    "<T_Digit>",
  };

}
