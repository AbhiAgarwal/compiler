/* Generated By:JavaCC: Do not edit this line. Pr3BaseEmbedConstants.java */
package edu.nyu.csci.cc.fall14;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Pr3BaseEmbedConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int T_meta_Arg = 8;
  /** RegularExpression Id. */
  int T_meta_Program = 14;
  /** RegularExpression Id. */
  int T_meta_SYMBOL = 20;
  /** RegularExpression Id. */
  int T_meta_Integers = 26;
  /** RegularExpression Id. */
  int T_meta_Integer = 32;
  /** RegularExpression Id. */
  int T_meta_Constant = 40;
  /** RegularExpression Id. */
  int T_meta_ArgumentSignature = 48;
  /** RegularExpression Id. */
  int T_meta_TypeIdentifierTail = 54;
  /** RegularExpression Id. */
  int T_meta_Instructions = 62;
  /** RegularExpression Id. */
  int T_meta_Instruction = 70;
  /** RegularExpression Id. */
  int T_meta_Op = 100;
  /** RegularExpression Id. */
  int T_meta_Declarations = 106;
  /** RegularExpression Id. */
  int T_meta_Declaration = 113;
  /** RegularExpression Id. */
  int T_meta_Symbol = 119;
  /** RegularExpression Id. */
  int T_meta_IDENTIFIER = 125;
  /** RegularExpression Id. */
  int T_meta_IfTail = 132;
  /** RegularExpression Id. */
  int T_meta_Expression = 149;
  /** RegularExpression Id. */
  int T_meta_Statements = 155;
  /** RegularExpression Id. */
  int T_meta_Statement = 166;
  /** RegularExpression Id. */
  int T_meta_Identifier = 172;
  /** RegularExpression Id. */
  int T_meta_INTEGER = 178;
  /** RegularExpression Id. */
  int T_meta_Type = 186;
  /** RegularExpression Id. */
  int T_meta_Sign = 192;
  /** RegularExpression Id. */
  int T_meta_Mem = 200;
  /** RegularExpression Id. */
  int T_meta_Regs = 206;
  /** RegularExpression Id. */
  int T_meta_Reg = 228;
  /** RegularExpression Id. */
  int T_IDENTIFIER = 231;
  /** RegularExpression Id. */
  int T_INTEGER = 232;
  /** RegularExpression Id. */
  int T_Letter = 233;
  /** RegularExpression Id. */
  int T_LetterEtc = 234;
  /** RegularExpression Id. */
  int T_Digit = 235;
  /** RegularExpression Id. */
  int T_SYMBOL = 236;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_META_Arg = 1;
  /** Lexical state. */
  int IN_NESTED_META_Arg = 2;
  /** Lexical state. */
  int IN_META_Program = 3;
  /** Lexical state. */
  int IN_NESTED_META_Program = 4;
  /** Lexical state. */
  int IN_META_SYMBOL = 5;
  /** Lexical state. */
  int IN_NESTED_META_SYMBOL = 6;
  /** Lexical state. */
  int IN_META_Integers = 7;
  /** Lexical state. */
  int IN_NESTED_META_Integers = 8;
  /** Lexical state. */
  int IN_META_Integer = 9;
  /** Lexical state. */
  int IN_NESTED_META_Integer = 10;
  /** Lexical state. */
  int IN_META_Constant = 11;
  /** Lexical state. */
  int IN_NESTED_META_Constant = 12;
  /** Lexical state. */
  int IN_META_ArgumentSignature = 13;
  /** Lexical state. */
  int IN_NESTED_META_ArgumentSignature = 14;
  /** Lexical state. */
  int IN_META_TypeIdentifierTail = 15;
  /** Lexical state. */
  int IN_NESTED_META_TypeIdentifierTail = 16;
  /** Lexical state. */
  int IN_META_Instructions = 17;
  /** Lexical state. */
  int IN_NESTED_META_Instructions = 18;
  /** Lexical state. */
  int IN_META_Instruction = 19;
  /** Lexical state. */
  int IN_NESTED_META_Instruction = 20;
  /** Lexical state. */
  int IN_META_Op = 21;
  /** Lexical state. */
  int IN_NESTED_META_Op = 22;
  /** Lexical state. */
  int IN_META_Declarations = 23;
  /** Lexical state. */
  int IN_NESTED_META_Declarations = 24;
  /** Lexical state. */
  int IN_META_Declaration = 25;
  /** Lexical state. */
  int IN_NESTED_META_Declaration = 26;
  /** Lexical state. */
  int IN_META_Symbol = 27;
  /** Lexical state. */
  int IN_NESTED_META_Symbol = 28;
  /** Lexical state. */
  int IN_META_IDENTIFIER = 29;
  /** Lexical state. */
  int IN_NESTED_META_IDENTIFIER = 30;
  /** Lexical state. */
  int IN_META_IfTail = 31;
  /** Lexical state. */
  int IN_NESTED_META_IfTail = 32;
  /** Lexical state. */
  int IN_META_Expression = 33;
  /** Lexical state. */
  int IN_NESTED_META_Expression = 34;
  /** Lexical state. */
  int IN_META_Statements = 35;
  /** Lexical state. */
  int IN_NESTED_META_Statements = 36;
  /** Lexical state. */
  int IN_META_Statement = 37;
  /** Lexical state. */
  int IN_NESTED_META_Statement = 38;
  /** Lexical state. */
  int IN_META_Identifier = 39;
  /** Lexical state. */
  int IN_NESTED_META_Identifier = 40;
  /** Lexical state. */
  int IN_META_INTEGER = 41;
  /** Lexical state. */
  int IN_NESTED_META_INTEGER = 42;
  /** Lexical state. */
  int IN_META_Type = 43;
  /** Lexical state. */
  int IN_NESTED_META_Type = 44;
  /** Lexical state. */
  int IN_META_Sign = 45;
  /** Lexical state. */
  int IN_NESTED_META_Sign = 46;
  /** Lexical state. */
  int IN_META_Mem = 47;
  /** Lexical state. */
  int IN_NESTED_META_Mem = 48;
  /** Lexical state. */
  int IN_META_Regs = 49;
  /** Lexical state. */
  int IN_NESTED_META_Regs = 50;
  /** Lexical state. */
  int IN_META_Reg = 51;
  /** Lexical state. */
  int IN_NESTED_META_Reg = 52;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\",\"",
    "\"LSL\"",
    "\"LSR\"",
    "<token of kind 4>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 9>",
    "<token of kind 10>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 15>",
    "<token of kind 16>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 21>",
    "<token of kind 22>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 27>",
    "<token of kind 28>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 33>",
    "\"#\"",
    "\"&\"",
    "<token of kind 36>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 41>",
    "\"(\"",
    "\")\"",
    "<token of kind 44>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 49>",
    "<token of kind 50>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 55>",
    "\"{\"",
    "\"}\"",
    "<token of kind 58>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 63>",
    "\"DCI\"",
    "\"=\"",
    "<token of kind 66>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 71>",
    "\"ADD\"",
    "\"AND\"",
    "\"B\"",
    "\"BEQ\"",
    "\"BGE\"",
    "\"BGT\"",
    "\"BL\"",
    "\"BLE\"",
    "\"BLT\"",
    "\"BNE\"",
    "\"CMP\"",
    "\"EOR\"",
    "\"LDMFD\"",
    "\"!\"",
    "\"LDR\"",
    "\"LDRB\"",
    "\"MOV\"",
    "\"MUL\"",
    "\"MVN\"",
    "\"ORR\"",
    "\"STMFD\"",
    "\"STR\"",
    "\"STRB\"",
    "\"SUB\"",
    "<token of kind 96>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 101>",
    "<token of kind 102>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 107>",
    "\"function\"",
    "<token of kind 109>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 114>",
    "<token of kind 115>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 120>",
    "<token of kind 121>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 126>",
    "\"else\"",
    "<token of kind 128>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 133>",
    "\"||\"",
    "\"&&\"",
    "\"!=\"",
    "\"==\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "<token of kind 145>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 150>",
    "<token of kind 151>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 156>",
    "\";\"",
    "\"if\"",
    "\"return\"",
    "\"var\"",
    "\"while\"",
    "<token of kind 162>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 167>",
    "<token of kind 168>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 173>",
    "<token of kind 174>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 179>",
    "\"boolean\"",
    "\"int\"",
    "<token of kind 182>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 187>",
    "<token of kind 188>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 193>",
    "\"[\"",
    "\"]\"",
    "<token of kind 196>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 201>",
    "<token of kind 202>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 207>",
    "\"LR\"",
    "\"PC\"",
    "\"R0\"",
    "\"R1\"",
    "\"R10\"",
    "\"R11\"",
    "\"R12\"",
    "\"R2\"",
    "\"R3\"",
    "\"R4\"",
    "\"R5\"",
    "\"R6\"",
    "\"R7\"",
    "\"R8\"",
    "\"R9\"",
    "\"SP\"",
    "<token of kind 224>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 229>",
    "<token of kind 230>",
    "<T_IDENTIFIER>",
    "<T_INTEGER>",
    "<T_Letter>",
    "<T_LetterEtc>",
    "<T_Digit>",
    "<T_SYMBOL>",
  };

}
