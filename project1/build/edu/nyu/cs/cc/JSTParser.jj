/* edu.nyu.cs.cc.JSTParser: PG-generated JavaCC parser specification. */

options {
	SANITY_CHECK  = true;
	BUILD_PARSER = true;
	JDK_VERSION = "1.5";
	ERROR_REPORTING = true;
	DEBUG_PARSER = true;
	BUILD_TOKEN_MANAGER = true;
	FORCE_LA_CHECK = true;
	STATIC = false;
}

PARSER_BEGIN(JSTParser)
package edu.nyu.cs.cc;

/** PG Grammar for HACS module edu.nyu.cs.cc.JST.
 * @version $Id: CookPG.crs,v 1.48 2014/01/26 21:14:39 krisrose Exp $
 */
public class JSTParser implements net.sf.crsx.Parser
{
	/** Factory. */
	net.sf.crsx.Factory<? extends net.sf.crsx.Term> factory;
	/** Compilation unit name for error messages. */
	String unit;
	/** Whether the parser should capture token locations. */
	boolean captureLocations = true;
	/** Constructor with token location information. */
	private net.sf.crsx.Constructor makeTConstructor(net.sf.crsx.Sink sink, Token t, Object object, String sort)
	{
		net.sf.crsx.Constructor c = sort == null ? sink.makeConstructor(object) : sink.makeLiteral(object, sort);
		if (t == null) t = token;
		if (captureLocations && t != null)
		{
			if (factory.get("meta") == null)
				c = net.sf.crsx.util.Util.wrapWithLocation(sink, c, unit, t.beginLine, t.beginColumn);
		}
		return c;
	}

	/** Helper interface with category non-terminal calls. */
	abstract class CategoryCall { abstract net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException; }
	/** Direct category invocations. */
	java.util.Map<String,CategoryCall> categoryCall = new java.util.HashMap<String,CategoryCall>();
	{
		categoryCall.put("jst", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Identifier$WithEOF(sink, bound);} });
		categoryCall.put("jstIdentifier", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Identifier$WithEOF(sink, bound);} });
		categoryCall.put("jstDecimal", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Decimal$WithEOF(sink, bound);} });
		categoryCall.put("jstString", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_String$WithEOF(sink, bound);} });
		categoryCall.put("jstType", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Type$WithEOF(sink, bound);} });
	}

	// Constructor.

	/** Construct dummy instance. */
	public JSTParser()
	{
		this((java.io.Reader) null);
		disable_tracing();
	}

	// Parser implementation.

	public net.sf.crsx.Parser parser(net.sf.crsx.Factory<? extends net.sf.crsx.Term> f)
	{
		if (factory != null)
		{
			net.sf.crsx.Parser parser = new JSTParser().parser(f);
			parser.setParserVerbose(trace_enabled); parser.setParserLocation(captureLocations);
			return parser;
		}
		else
		{
			factory = f;
			assert f != null : "Or Else!";
			return this;
		}
	}

	public void setParserVerbose(boolean verbose)
	{
		if (verbose)
			enable_tracing();
		else
			disable_tracing();
	}

	public void setParserLocation(boolean capture)
	{
		captureLocations = capture;
	}

	public void setEmbeddedParser(net.sf.crsx.Parser subparser) throws net.sf.crsx.CRSException
	{}

	public Iterable<String> categories()
	{
		return categoryCall.keySet();
	}

	public net.sf.crsx.Sink parse(net.sf.crsx.Sink sink, String category, java.io.Reader reader, String unit, int firstLine, int firstColumn, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws net.sf.crsx.CRSException, java.io.IOException
	{
		try
		{
			this.unit = unit;
			ReInit((java.io.Reader) null);
			jj_input_stream.ReInit(reader, firstLine, firstColumn); token_source = new JSTParserTokenManager(jj_input_stream); // hacks to update line and column numbers
			if (bound == null) bound = new net.sf.crsx.util.LinkedExtensibleMap<String, net.sf.crsx.Variable>();
			if (category == null || category.length() == 0) return N_Identifier(sink, bound);
			else if (categoryCall.containsKey(category)) return categoryCall.get(category).call(sink, bound);
			else throw new net.sf.crsx.CRSException("Parser category '"+category+"' not supported!");
		}
		catch (ParseException e)
		{
			throw new net.sf.crsx.CRSException(e.getMessage());
		}
	}

	public net.sf.crsx.Term parseTerm(net.sf.crsx.Maker maker, String category, java.io.Reader reader, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws net.sf.crsx.CRSException, java.io.IOException
	{
		net.sf.crsx.util.Buffer buffer = new net.sf.crsx.util.Buffer(maker);
		parse(buffer.sink(), category, reader, null, 1, 1, bound);
		return buffer.term(true);
	}


static String unmeta(String s, int i) {String inner = s.substring(1, s.length()-1).trim(); return (inner.length() > i ? inner.substring(i) : inner).trim();}

	/**
	 * Run the parser and print the resulting term.
	 * @param args should contain two strings: the category and an input file name
	 */
	public static void main(String[] args)
	{
		try
		{
			if (args.length != 2)
			{
				System.err.println("Usage: JSTParser category input");
				System.exit(2);
			}
			String category = args[0];
			java.io.Reader reader = new java.io.FileReader(args[1]);
			net.sf.crsx.Factory<net.sf.crsx.generic.GenericTerm> factory = new net.sf.crsx.generic.GenericFactory();
			net.sf.crsx.Parser parser = new JSTParser();
			net.sf.crsx.Sink sink = factory.sink(System.out);
			parser.parser(factory).parse(sink, category, reader, null, 1, 1, null);
		}
		catch (net.sf.crsx.CRSException e)
		{
			System.err.println("CRS error: "+e);
			System.exit(1);
		}
		catch (java.io.IOException e)
		{
			System.err.println("I/O error: "+e);
			System.exit(1);
		}
	}

}
PARSER_END(JSTParser)

/* GRAMMAR. */

/* Productions for Identifier token. */

/** <em>Identifier$WithEOF</em> ::= <em>Identifier</em> EOF . */
net.sf.crsx.Sink N_Identifier$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_Identifier(sink, env) <EOF> {return sink;} }

/**
 * <em>Identifier</em> ::=   <a href="#T_meta1_T_M_IDENTIFIER">meta1_T_M_IDENTIFIER</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_IDENTIFIER">meta2_T_M_IDENTIFIER</a><font color="red">$$:%{unmeta(#,10)%}</font>  <br>
 *  |   <a href="#T_T_M_IDENTIFIER">T_M_IDENTIFIER</a><font color="red">$</font> 
 */
net.sf.crsx.Sink N_Identifier(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
}
{
	 ( 
	t=<T_meta1_T_M_IDENTIFIER>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_IDENTIFIER>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),10)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_T_M_IDENTIFIER>
	{
		sink = sink .start(makeTConstructor(sink, t, t.toString(), net.sf.crsx.CRS.STRING_SORT)) ;
	}
	 ) 
	{
		return sink .end() ;
	}
}

TOKEN : { < T_meta1_T_M_IDENTIFIER : ("⟨" (" ")* "Identifier" (" ")* "⟩") > }
MORE : { < "⟨" (" ")* "Identifier" (" ")* ~["⟩"] > { nested_counter = 0; } : IN_META_T_M_IDENTIFIER}
<IN_META_T_M_IDENTIFIER,IN_NESTED_META_T_M_IDENTIFIER> MORE : { "⟨" { nested_counter++; } : IN_NESTED_META_T_M_IDENTIFIER }
<IN_NESTED_META_T_M_IDENTIFIER> MORE : { "⟩" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_IDENTIFIER); } }
<IN_META_T_M_IDENTIFIER> TOKEN : { < T_meta2_T_M_IDENTIFIER : "⟩" > : DEFAULT }
<IN_META_T_M_IDENTIFIER,IN_NESTED_META_T_M_IDENTIFIER> MORE : { < ~[] > }


/* Productions for Decimal token. */

/** <em>Decimal$WithEOF</em> ::= <em>Decimal</em> EOF . */
net.sf.crsx.Sink N_Decimal$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_Decimal(sink, env) <EOF> {return sink;} }

/**
 * <em>Decimal</em> ::=   <a href="#T_meta1_T_M_DECIMAL">meta1_T_M_DECIMAL</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_DECIMAL">meta2_T_M_DECIMAL</a><font color="red">$$:%{unmeta(#,7)%}</font>  <br>
 *  |   <a href="#T_T_M_DECIMAL">T_M_DECIMAL</a><font color="red">$</font> 
 */
net.sf.crsx.Sink N_Decimal(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
}
{
	 ( 
	t=<T_meta1_T_M_DECIMAL>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_DECIMAL>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),7)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_T_M_DECIMAL>
	{
		sink = sink .start(makeTConstructor(sink, t, t.toString(), net.sf.crsx.CRS.STRING_SORT)) ;
	}
	 ) 
	{
		return sink .end() ;
	}
}

TOKEN : { < T_meta1_T_M_DECIMAL : ("⟨" (" ")* "Decimal" (" ")* "⟩") > }
MORE : { < "⟨" (" ")* "Decimal" (" ")* ~["⟩"] > { nested_counter = 0; } : IN_META_T_M_DECIMAL}
<IN_META_T_M_DECIMAL,IN_NESTED_META_T_M_DECIMAL> MORE : { "⟨" { nested_counter++; } : IN_NESTED_META_T_M_DECIMAL }
<IN_NESTED_META_T_M_DECIMAL> MORE : { "⟩" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_DECIMAL); } }
<IN_META_T_M_DECIMAL> TOKEN : { < T_meta2_T_M_DECIMAL : "⟩" > : DEFAULT }
<IN_META_T_M_DECIMAL,IN_NESTED_META_T_M_DECIMAL> MORE : { < ~[] > }


/* Productions for String token. */

/** <em>String$WithEOF</em> ::= <em>String</em> EOF . */
net.sf.crsx.Sink N_String$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_String(sink, env) <EOF> {return sink;} }

/**
 * <em>String</em> ::=   <a href="#T_meta1_T_M_STRING">meta1_T_M_STRING</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_STRING">meta2_T_M_STRING</a><font color="red">$$:%{unmeta(#,6)%}</font>  <br>
 *  |   <a href="#T_T_M_STRING">T_M_STRING</a><font color="red">$</font> 
 */
net.sf.crsx.Sink N_String(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
}
{
	 ( 
	t=<T_meta1_T_M_STRING>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_STRING>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),6)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_T_M_STRING>
	{
		sink = sink .start(makeTConstructor(sink, t, t.toString(), net.sf.crsx.CRS.STRING_SORT)) ;
	}
	 ) 
	{
		return sink .end() ;
	}
}

TOKEN : { < T_meta1_T_M_STRING : ("⟨" (" ")* "String" (" ")* "⟩") > }
MORE : { < "⟨" (" ")* "String" (" ")* ~["⟩"] > { nested_counter = 0; } : IN_META_T_M_STRING}
<IN_META_T_M_STRING,IN_NESTED_META_T_M_STRING> MORE : { "⟨" { nested_counter++; } : IN_NESTED_META_T_M_STRING }
<IN_NESTED_META_T_M_STRING> MORE : { "⟩" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_STRING); } }
<IN_META_T_M_STRING> TOKEN : { < T_meta2_T_M_STRING : "⟩" > : DEFAULT }
<IN_META_T_M_STRING,IN_NESTED_META_T_M_STRING> MORE : { < ~[] > }


/* Productions for Type sort with (highest) precedence 0. */

/** <em>Type$WithEOF</em> ::= <em>Type</em> EOF . */
net.sf.crsx.Sink N_Type$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_Type(sink, env) <EOF> {return sink;} }

/**
 * <em>Type</em> ::=   <a href="#T_meta1_T_M_TYPE">meta1_T_M_TYPE</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_TYPE">meta2_T_M_TYPE</a><font color="red">$$:%{unmeta(#,4)%}</font>  <br>
 *  |  (   "<code>Identifier</code>"   <font color="red">{{Type__M_Identifier}}</font>  |  (   "<code>boolean</code>"   <font color="red">{{Type__M_boolean}}</font>  |  (   "<code>int</code>"   <font color="red">{{Type__M_int}}</font>  |  (   "<code>string</code>"   <font color="red">{{Type__M_string}}</font>  |   "<code>void</code>"   <font color="red">{{Type__M_void}}</font>  )  )  )  ) 
 */
net.sf.crsx.Sink N_Type(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
}
{
	 ( 
	t=<T_meta1_T_M_TYPE>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_TYPE>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),4)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
		 ( 
		"Identifier"
		 ) 
		 ( 
		{
			sink = sink .start(sink.makeConstructor("Type__M_Identifier")) .end() ;
		}
		 ) 
	|
		 ( 
			 ( 
			"boolean"
			 ) 
			 ( 
			{
				sink = sink .start(sink.makeConstructor("Type__M_boolean")) .end() ;
			}
			 ) 
		|
			 ( 
				 ( 
				"int"
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("Type__M_int")) .end() ;
				}
				 ) 
			|
				 ( 
					 ( 
					"string"
					 ) 
					 ( 
					{
						sink = sink .start(sink.makeConstructor("Type__M_string")) .end() ;
					}
					 ) 
				|
					 ( 
					"void"
					 ) 
					 ( 
					{
						sink = sink .start(sink.makeConstructor("Type__M_void")) .end() ;
					}
					 ) 
				 ) 
			 ) 
		 ) 
	 ) 
	{return sink;}
}

TOKEN : { < T_meta1_T_M_TYPE : ("⟨" (" ")* "Type" (" ")* "⟩") > }
MORE : { < "⟨" (" ")* "Type" (" ")* ~["⟩"] > { nested_counter = 0; } : IN_META_T_M_TYPE}
<IN_META_T_M_TYPE,IN_NESTED_META_T_M_TYPE> MORE : { "⟨" { nested_counter++; } : IN_NESTED_META_T_M_TYPE }
<IN_NESTED_META_T_M_TYPE> MORE : { "⟩" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_TYPE); } }
<IN_META_T_M_TYPE> TOKEN : { < T_meta2_T_M_TYPE : "⟩" > : DEFAULT }
<IN_META_T_M_TYPE,IN_NESTED_META_T_M_TYPE> MORE : { < ~[] > }


/* TOKENS. */

TOKEN_MGR_DECLS : { int nested_counter; } /* Used by all nesting constructs. */


/**
 * T_M_LETTER ::= ["<code>A</code>"&ndash;"<code>Z</code>","<code>a</code>"&ndash;"<code>z</code>"]
 */
TOKEN : {<#T_T_M_LETTER : ["A"-"Z","a"-"z"] >}

/**
 * T_M_OTHERLETTER ::=  "<code>Letter</code>" | ["<code>$</code>","<code>_</code>"]
 */
TOKEN : {<#T_T_M_OTHERLETTER : "Letter" | ["$","_"] >}

/**
 * T_M_DIGIT ::= ["<code>0</code>"&ndash;"<code>9</code>"]
 */
TOKEN : {<#T_T_M_DIGIT : ["0"-"9"] >}

/**
 * T_M_IDENTIFIER ::= T_M_OTHERLETTER ((T_M_OTHERLETTER | T_M_DIGIT))*
 */
TOKEN : {<T_T_M_IDENTIFIER : <T_T_M_OTHERLETTER> ((<T_T_M_OTHERLETTER> | <T_T_M_DIGIT>))* >}

/**
 * T_M_DECIMAL ::= (T_M_DIGIT)+ ( "<code>.</code>")+ (T_M_DIGIT)+
 */
TOKEN : {<T_T_M_DECIMAL : (<T_T_M_DIGIT>)+ (".")+ (<T_T_M_DIGIT>)+ >}

/**
 * T_M_STRING ::= ["<code>'</code>"] (T_M_LETTER)+ ["<code>'</code>"] | ["<code>"</code>"] (T_M_LETTER)+ ["<code>"</code>"]
 */
TOKEN : {<T_T_M_STRING : ["\'"] (<T_T_M_LETTER>)+ ["\'"] | ["\""] (<T_T_M_LETTER>)+ ["\""] >}

/**
 * <b>skip</b> ::=  "<code> </code>"
 */
SKIP : { <" "> }
